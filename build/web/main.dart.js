// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const color_scheme = flutter_sdk.src__material__color_scheme;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const implicit_animations = flutter_sdk.src__widgets__implicit_animations;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const box_border = flutter_sdk.src__painting__box_border;
  const key = flutter_sdk.src__foundation__key;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const binding = flutter_sdk.src__widgets__binding;
  const image_provider = flutter_sdk.src__painting__image_provider;
  const recognizer = flutter_sdk.src__gestures__recognizer;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const sliver = flutter_sdk.src__widgets__sliver;
  const assertions = flutter_sdk.src__foundation__assertions;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const scroll_physics = flutter_sdk.src__widgets__scroll_physics;
  const sliver$ = flutter_sdk.src__rendering__sliver;
  const box$ = flutter_sdk.src__rendering__box;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const overlay$ = flutter_sdk.src__widgets__overlay;
  const constants = flutter_sdk.src__gestures__constants;
  const events = flutter_sdk.src__gestures__events;
  const multidrag = flutter_sdk.src__gestures__multidrag;
  const drag = flutter_sdk.src__gestures__drag;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const animation = flutter_sdk.src__animation__animation;
  const curves = flutter_sdk.src__animation__curves;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const layout_builder = flutter_sdk.src__widgets__layout_builder;
  const container = flutter_sdk.src__widgets__container;
  const proxy_box = flutter_sdk.src__rendering__proxy_box;
  const media_query = flutter_sdk.src__widgets__media_query;
  const scrollable = flutter_sdk.src__widgets__scrollable;
  const navigator$ = flutter_sdk.src__widgets__navigator;
  const material = flutter_sdk.src__material__material;
  const ticker = flutter_sdk.src__scheduler__ticker;
  const image = flutter_sdk.src__widgets__image;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var reorderable_grid_view = Object.create(dart.library);
  var reorderable_wrapper_widget = Object.create(dart.library);
  var reorderable_item = Object.create(dart.library);
  var reorderable_sliver_grid_view = Object.create(dart.library);
  var reorderable_grid_mixin = Object.create(dart.library);
  var util = Object.create(dart.library);
  var sliver_grid_with_reorderable_pos_delegate = Object.create(dart.library);
  var drag_info = Object.create(dart.library);
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $removeAt = dartx.removeAt;
  var $insert = dartx.insert;
  var $every = dartx.every;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $truncate = dartx.truncate;
  var $modulo = dartx['%'];
  var $containsKey = dartx.containsKey;
  var $keys = dartx.keys;
  var $indexOf = dartx.indexOf;
  var $values = dartx.values;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    StringToWidget: () => (T$.StringToWidget = dart.constFn(dart.fnType(framework.Widget, [core.String])))(),
    intToWidget: () => (T$.intToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int])))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    ImageProviderOfObject: () => (T$.ImageProviderOfObject = dart.constFn(image_provider.ImageProvider$(core.Object)))(),
    ImageProviderNOfObject: () => (T$.ImageProviderNOfObject = dart.constFn(dart.nullable(T$.ImageProviderOfObject())))(),
    intAndWidgetAndImageProviderNOfObjectToWidget: () => (T$.intAndWidgetAndImageProviderNOfObjectToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int, framework.Widget, T$.ImageProviderNOfObject()])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    BuildContextAndintToReorderableItemView: () => (T$.BuildContextAndintToReorderableItemView = dart.constFn(dart.fnType(reorderable_item.ReorderableItemView, [framework.BuildContext, core.int])))(),
    WidgetTobool: () => (T$.WidgetTobool = dart.constFn(dart.fnType(core.bool, [framework.Widget])))(),
    GlobalKeyOfOverlayState: () => (T$.GlobalKeyOfOverlayState = dart.constFn(framework.GlobalKey$(overlay$.OverlayState)))(),
    IdentityMapOfint$ReorderableItemViewState: () => (T$.IdentityMapOfint$ReorderableItemViewState = dart.constFn(_js_helper.IdentityMap$(core.int, reorderable_item.ReorderableItemViewState)))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    ReorderableGridStateMixinOfReorderableGridWidgetMixin: () => (T$.ReorderableGridStateMixinOfReorderableGridWidgetMixin = dart.constFn(reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_grid_mixin.ReorderableGridWidgetMixin)))(),
    StateOfStatefulWidget: () => (T$.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T$.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T$.StateOfStatefulWidget())))(),
    AnimationStatusTovoid: () => (T$.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    PointerDownEventTovoid: () => (T$.PointerDownEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerDownEvent])))(),
    BuildContextAndBoxConstraintsToTransform: () => (T$.BuildContextAndBoxConstraintsToTransform = dart.constFn(dart.fnType(basic.Transform, [framework.BuildContext, box$.BoxConstraints])))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    ImageN: () => (T$.ImageN = dart.constFn(dart.nullable(ui.Image)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: scroll_view.ScrollViewKeyboardDismissBehavior.prototype,
        [_Enum__name]: "manual",
        [_Enum_index]: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "hardEdge",
        [_Enum_index]: 1
      });
    },
    get C5() {
      return C[5] = dart.constList([], framework.Widget);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 250000
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: null,
        [SizedBox_width]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 14000
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1
      });
    }
  }, false);
  var C = Array(11).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:reorderable_grid_view/reorderable_grid_view.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/reorderable_grid_view.dart",
    "package:reorderable_grid_view/src/reorderable_grid_mixin.dart",
    "package:reorderable_grid_view/src/reorderable_wrapper_widget.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_grid_mixin.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_item.dart",
    "package:reorderable_grid_view/src/reorderable_item.dart",
    "package:reorderable_grid_view/src/reorderable_sliver_grid_view.dart",
    "package:reorderable_grid_view/src/sliver_grid_with_reorderable_pos_delegate.dart",
    "package:reorderable_grid_view/src/drag_info.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Flutter Demo", theme: theme_data.ThemeData.new({colorScheme: color_scheme.ColorScheme.fromSeed({seedColor: colors.Colors.deepPurple}), useMaterial3: true}), home: new main.MyHomePage.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.ShoppingCartButton = class ShoppingCartButton extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.ShoppingCartButton.new({key: key});
    }
    createState() {
      return new main._ShoppingCartButtonState.new();
    }
  };
  (main.ShoppingCartButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.ShoppingCartButton.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.ShoppingCartButton.prototype;
  dart.addTypeTests(main.ShoppingCartButton);
  dart.addTypeCaches(main.ShoppingCartButton);
  dart.setMethodSignature(main.ShoppingCartButton, () => ({
    __proto__: dart.getMethods(main.ShoppingCartButton.__proto__),
    createState: dart.fnType(framework.State$(main.ShoppingCartButton), [])
  }));
  dart.setLibraryUri(main.ShoppingCartButton, I[0]);
  var Duration__duration = dart.privateName(core, "Duration._duration");
  main._ShoppingCartButtonState = class _ShoppingCartButtonState extends framework.State$(main.ShoppingCartButton) {
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new gesture_detector.GestureDetector.new({onTap: dart.fn(() => {
              this.setState(dart.fn(() => {
                this.isExpanded = !this.isExpanded;
              }, T$.VoidTovoid()));
            }, T$.VoidTovoid()), child: new implicit_animations.AnimatedContainer.new({duration: C[1] || CT.C1, width: this.isExpanded ? 200 : 80, height: this.isExpanded ? 200 : 80, decoration: new box_decoration.BoxDecoration.new({color: this.isExpanded ? colors.Colors.blue : colors.Colors.red, borderRadius: new border_radius.BorderRadius.circular(10), border: box_border.Border.all({width: 3})})})})})});
    }
    static ['_#new#tearOff']() {
      return new main._ShoppingCartButtonState.new();
    }
  };
  (main._ShoppingCartButtonState.new = function() {
    this.isExpanded = false;
    main._ShoppingCartButtonState.__proto__.new.call(this);
    ;
  }).prototype = main._ShoppingCartButtonState.prototype;
  dart.addTypeTests(main._ShoppingCartButtonState);
  dart.addTypeCaches(main._ShoppingCartButtonState);
  dart.setMethodSignature(main._ShoppingCartButtonState, () => ({
    __proto__: dart.getMethods(main._ShoppingCartButtonState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._ShoppingCartButtonState, I[0]);
  dart.setFieldSignature(main._ShoppingCartButtonState, () => ({
    __proto__: dart.getFields(main._ShoppingCartButtonState.__proto__),
    isExpanded: dart.fieldType(core.bool)
  }));
  main.MyHomePage = class MyHomePage extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MyHomePage.new({key: key});
    }
    createState() {
      return new main._MyHomePageState.new();
    }
  };
  (main.MyHomePage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MyHomePage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyHomePage.prototype;
  dart.addTypeTests(main.MyHomePage);
  dart.addTypeCaches(main.MyHomePage);
  dart.setMethodSignature(main.MyHomePage, () => ({
    __proto__: dart.getMethods(main.MyHomePage.__proto__),
    createState: dart.fnType(framework.State$(main.MyHomePage), [])
  }));
  dart.setLibraryUri(main.MyHomePage, I[0]);
  main._MyHomePageState = class _MyHomePageState extends framework.State$(main.MyHomePage) {
    build(context) {
      function buildItem(text) {
        return new main.ShoppingCartButton.new({key: new (T$.ValueKeyOfString()).new(text)});
      }
      dart.fn(buildItem, T$.StringToWidget());
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("<AppBar>")}), body: new basic.Center.new({child: reorderable_grid_view.ReorderableGridView.count({crossAxisSpacing: 10, mainAxisSpacing: 10, crossAxisCount: 3, children: this.data[$map](framework.Widget, dart.fn(e => buildItem(dart.str(e)), T$.intToWidget()))[$toList](), onReorder: dart.fn((oldIndex, newIndex) => {
              this.setState(dart.fn(() => {
                let element = this.data[$removeAt](oldIndex);
                this.data[$insert](newIndex, element);
              }, T$.VoidTovoid()));
            }, T$.intAndintTovoid())})})});
    }
    static ['_#new#tearOff']() {
      return new main._MyHomePageState.new();
    }
  };
  (main._MyHomePageState.new = function() {
    this.data = T$.ListOfint().generate(25, dart.fn(i => i, T$.intToint()));
    main._MyHomePageState.__proto__.new.call(this);
    ;
  }).prototype = main._MyHomePageState.prototype;
  dart.addTypeTests(main._MyHomePageState);
  dart.addTypeCaches(main._MyHomePageState);
  dart.setMethodSignature(main._MyHomePageState, () => ({
    __proto__: dart.getMethods(main._MyHomePageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._MyHomePageState, I[0]);
  dart.setFieldSignature(main._MyHomePageState, () => ({
    __proto__: dart.getFields(main._MyHomePageState.__proto__),
    data: dart.finalFieldType(core.List$(core.int))
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var isScreenshotDragWidget$ = dart.privateName(reorderable_grid_view, "DragWidgetBuilderV2.isScreenshotDragWidget");
  var builder$ = dart.privateName(reorderable_grid_view, "DragWidgetBuilderV2.builder");
  reorderable_grid_view.DragWidgetBuilderV2 = class DragWidgetBuilderV2 extends core.Object {
    get isScreenshotDragWidget() {
      return this[isScreenshotDragWidget$];
    }
    set isScreenshotDragWidget(value) {
      super.isScreenshotDragWidget = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let isScreenshotDragWidget = opts && 'isScreenshotDragWidget' in opts ? opts.isScreenshotDragWidget : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new reorderable_grid_view.DragWidgetBuilderV2.new({isScreenshotDragWidget: isScreenshotDragWidget, builder: builder});
    }
    static createByOldBuilder9(oldBuilder) {
      if (oldBuilder == null) return null;
      return new reorderable_grid_view.DragWidgetBuilderV2.new({isScreenshotDragWidget: false, builder: dart.fn((index, child, screenshot) => oldBuilder(index, child), T$.intAndWidgetAndImageProviderNOfObjectToWidget())});
    }
  };
  (reorderable_grid_view.DragWidgetBuilderV2.new = function(opts) {
    let isScreenshotDragWidget = opts && 'isScreenshotDragWidget' in opts ? opts.isScreenshotDragWidget : false;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[isScreenshotDragWidget$] = isScreenshotDragWidget;
    this[builder$] = builder;
    ;
  }).prototype = reorderable_grid_view.DragWidgetBuilderV2.prototype;
  dart.addTypeTests(reorderable_grid_view.DragWidgetBuilderV2);
  dart.addTypeCaches(reorderable_grid_view.DragWidgetBuilderV2);
  dart.setStaticMethodSignature(reorderable_grid_view.DragWidgetBuilderV2, () => ['createByOldBuilder9']);
  dart.setLibraryUri(reorderable_grid_view.DragWidgetBuilderV2, I[1]);
  dart.setFieldSignature(reorderable_grid_view.DragWidgetBuilderV2, () => ({
    __proto__: dart.getFields(reorderable_grid_view.DragWidgetBuilderV2.__proto__),
    isScreenshotDragWidget: dart.finalFieldType(core.bool),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [core.int, framework.Widget, dart.nullable(image_provider.ImageProvider$(core.Object))]))
  }));
  var onReorder$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.onReorder");
  var dragWidgetBuilderV2$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.dragWidgetBuilderV2");
  var scrollSpeedController$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.scrollSpeedController");
  var placeholderBuilder$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.placeholderBuilder");
  var onDragStart$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.onDragStart");
  var onDragUpdate$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.onDragUpdate");
  var primary$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.primary");
  var shrinkWrap$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.shrinkWrap");
  var restrictDragScope$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.restrictDragScope");
  var padding$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.padding");
  var physics$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.physics");
  var reverse$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.reverse");
  var cacheExtent$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.cacheExtent");
  var semanticChildCount$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.semanticChildCount");
  var keyboardDismissBehavior$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.keyboardDismissBehavior");
  var clipBehavior$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.clipBehavior");
  var restorationId$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.restorationId");
  var childrenDelegate$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.childrenDelegate");
  var gridDelegate$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.gridDelegate");
  var controller$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.controller");
  var dragStartBehavior$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.dragStartBehavior");
  var dragStartDelay$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.dragStartDelay");
  var dragEnabled$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.dragEnabled");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  reorderable_grid_view.ReorderableGridView = class ReorderableGridView extends framework.StatelessWidget {
    get onReorder() {
      return this[onReorder$];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get dragWidgetBuilderV2() {
      return this[dragWidgetBuilderV2$];
    }
    set dragWidgetBuilderV2(value) {
      super.dragWidgetBuilderV2 = value;
    }
    get scrollSpeedController() {
      return this[scrollSpeedController$];
    }
    set scrollSpeedController(value) {
      super.scrollSpeedController = value;
    }
    get placeholderBuilder() {
      return this[placeholderBuilder$];
    }
    set placeholderBuilder(value) {
      super.placeholderBuilder = value;
    }
    get onDragStart() {
      return this[onDragStart$];
    }
    set onDragStart(value) {
      super.onDragStart = value;
    }
    get onDragUpdate() {
      return this[onDragUpdate$];
    }
    set onDragUpdate(value) {
      super.onDragUpdate = value;
    }
    get primary() {
      return this[primary$];
    }
    set primary(value) {
      super.primary = value;
    }
    get shrinkWrap() {
      return this[shrinkWrap$];
    }
    set shrinkWrap(value) {
      super.shrinkWrap = value;
    }
    get restrictDragScope() {
      return this[restrictDragScope$];
    }
    set restrictDragScope(value) {
      super.restrictDragScope = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get physics() {
      return this[physics$];
    }
    set physics(value) {
      super.physics = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get cacheExtent() {
      return this[cacheExtent$];
    }
    set cacheExtent(value) {
      super.cacheExtent = value;
    }
    get semanticChildCount() {
      return this[semanticChildCount$];
    }
    set semanticChildCount(value) {
      super.semanticChildCount = value;
    }
    get keyboardDismissBehavior() {
      return this[keyboardDismissBehavior$];
    }
    set keyboardDismissBehavior(value) {
      super.keyboardDismissBehavior = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get childrenDelegate() {
      return this[childrenDelegate$];
    }
    set childrenDelegate(value) {
      super.childrenDelegate = value;
    }
    get gridDelegate() {
      return this[gridDelegate$];
    }
    set gridDelegate(value) {
      super.gridDelegate = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get dragStartDelay() {
      return this[dragStartDelay$];
    }
    set dragStartDelay(value) {
      super.dragStartDelay = value;
    }
    get dragEnabled() {
      return this[dragEnabled$];
    }
    set dragEnabled(value) {
      super.dragEnabled = value;
    }
    static ['_#builder#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
      let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
      let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
      let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
      return new reorderable_grid_view.ReorderableGridView.builder({key: key, onReorder: onReorder, scrollSpeedController: scrollSpeedController, dragWidgetBuilder: dragWidgetBuilder, dragWidgetBuilderV2: dragWidgetBuilderV2, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, gridDelegate: gridDelegate, itemBuilder: itemBuilder, itemCount: itemCount, addAutomaticKeepAlives: addAutomaticKeepAlives, addRepaintBoundaries: addRepaintBoundaries, addSemanticIndexes: addSemanticIndexes, cacheExtent: cacheExtent, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, dragStartDelay: dragStartDelay, dragEnabled: dragEnabled, restrictDragScope: restrictDragScope});
    }
    static count(opts) {
      let t0, t0$;
      let key = opts && 'key' in opts ? opts.key : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let footer = opts && 'footer' in opts ? opts.footer : null;
      let header = opts && 'header' in opts ? opts.header : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let mainAxisExtent = opts && 'mainAxisExtent' in opts ? opts.mainAxisExtent : null;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
      let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
      let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
      let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
      if (!children[$every](dart.fn(w => w.key != null, T$.WidgetTobool()))) dart.assertFailed("All children of this widget must have a key.", I[2], 233, 7, "children.every((Widget w) => w.key != null)");
      return new reorderable_grid_view.ReorderableGridView.new({key: key, onReorder: onReorder, dragWidgetBuilderV2: (t0 = dragWidgetBuilderV2, t0 == null ? reorderable_grid_view.DragWidgetBuilderV2.createByOldBuilder9(dragWidgetBuilder) : t0), scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, childrenDelegate: new sliver.SliverChildListDelegate.new(reorderable_item.ReorderableItemView.wrapMeList(header, children, footer), {addAutomaticKeepAlives: addAutomaticKeepAlives, addRepaintBoundaries: addRepaintBoundaries, addSemanticIndexes: addSemanticIndexes}), gridDelegate: new sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.new({crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio}), reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, cacheExtent: cacheExtent, semanticChildCount: (t0$ = semanticChildCount, t0$ == null ? children[$length] : t0$), dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, dragEnabled: dragEnabled, dragStartDelay: dragStartDelay, restrictDragScope: core.bool.as(restrictDragScope)});
    }
    static ['_#count#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let footer = opts && 'footer' in opts ? opts.footer : null;
      let header = opts && 'header' in opts ? opts.header : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let mainAxisExtent = opts && 'mainAxisExtent' in opts ? opts.mainAxisExtent : null;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
      let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
      let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
      let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
      return reorderable_grid_view.ReorderableGridView.count({key: key, onReorder: onReorder, dragWidgetBuilder: dragWidgetBuilder, dragWidgetBuilderV2: dragWidgetBuilderV2, scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, footer: footer, header: header, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, mainAxisExtent: mainAxisExtent, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, crossAxisCount: crossAxisCount, addAutomaticKeepAlives: addAutomaticKeepAlives, addRepaintBoundaries: addRepaintBoundaries, addSemanticIndexes: addSemanticIndexes, cacheExtent: cacheExtent, children: children, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, dragStartDelay: dragStartDelay, dragEnabled: dragEnabled, restrictDragScope: restrictDragScope});
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let childrenDelegate = opts && 'childrenDelegate' in opts ? opts.childrenDelegate : null;
      let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
      return new reorderable_grid_view.ReorderableGridView.new({key: key, onReorder: onReorder, dragWidgetBuilderV2: dragWidgetBuilderV2, scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, gridDelegate: gridDelegate, childrenDelegate: childrenDelegate, restrictDragScope: restrictDragScope, reverse: reverse, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, cacheExtent: cacheExtent, semanticChildCount: semanticChildCount, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, controller: controller, dragStartBehavior: dragStartBehavior, dragStartDelay: dragStartDelay, dragEnabled: dragEnabled});
    }
    build(context) {
      return new reorderable_wrapper_widget.ReorderableWrapperWidget.new({onReorder: this.onReorder, dragWidgetBuilder: this.dragWidgetBuilderV2, scrollSpeedController: this.scrollSpeedController, placeholderBuilder: this.placeholderBuilder, onDragStart: this.onDragStart, onDragUpdate: this.onDragUpdate, dragEnabled: this.dragEnabled, dragStartDelay: this.dragStartDelay, restrictDragScope: this.restrictDragScope, child: new scroll_view.GridView.custom({key: this.key, gridDelegate: this.gridDelegate, childrenDelegate: this.childrenDelegate, controller: this.controller, reverse: this.reverse, primary: this.primary, physics: this.physics, shrinkWrap: this.shrinkWrap, padding: this.padding, cacheExtent: this.cacheExtent, semanticChildCount: this.semanticChildCount, keyboardDismissBehavior: this.keyboardDismissBehavior, restorationId: this.restorationId, clipBehavior: this.clipBehavior, dragStartBehavior: this.dragStartBehavior})});
    }
  };
  (reorderable_grid_view.ReorderableGridView.builder = function(opts) {
    let t0, t0$;
    let key = opts && 'key' in opts ? opts.key : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
    let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
    let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
    let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
    let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
    let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
    let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
    let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
    reorderable_grid_view.ReorderableGridView.new.call(this, {key: key, onReorder: onReorder, dragWidgetBuilderV2: (t0 = dragWidgetBuilderV2, t0 == null ? reorderable_grid_view.DragWidgetBuilderV2.createByOldBuilder9(dragWidgetBuilder) : t0), scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, childrenDelegate: new sliver.SliverChildBuilderDelegate.new(dart.fn((context, index) => {
        let child = itemBuilder(context, index);
        if (!dart.fn(() => {
          if (child.key == null) {
            dart.throw(assertions.FlutterError.new("Every item of ReorderableGridView must have a key."));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 157, 22, "() {\n                if (child.key == null) {\n                  throw FlutterError(\n                    'Every item of ReorderableGridView must have a key.',\n                  );\n                }\n                return true;\n              }()");
        return new reorderable_item.ReorderableItemView.new({key: dart.nullCheck(child.key), index: index, child: child});
      }, T$.BuildContextAndintToReorderableItemView()), {childCount: itemCount, addAutomaticKeepAlives: addAutomaticKeepAlives, addRepaintBoundaries: addRepaintBoundaries, addSemanticIndexes: addSemanticIndexes}), gridDelegate: gridDelegate, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, cacheExtent: cacheExtent, semanticChildCount: (t0$ = semanticChildCount, t0$ == null ? itemCount : t0$), dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, dragStartDelay: dragStartDelay, dragEnabled: dragEnabled, restrictDragScope: restrictDragScope});
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  (reorderable_grid_view.ReorderableGridView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
    let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let childrenDelegate = opts && 'childrenDelegate' in opts ? opts.childrenDelegate : null;
    let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[3] || CT.C3;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[4] || CT.C4;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[2] || CT.C2;
    let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
    let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
    this[onReorder$] = onReorder;
    this[dragWidgetBuilderV2$] = dragWidgetBuilderV2;
    this[scrollSpeedController$] = scrollSpeedController;
    this[placeholderBuilder$] = placeholderBuilder;
    this[onDragStart$] = onDragStart;
    this[onDragUpdate$] = onDragUpdate;
    this[gridDelegate$] = gridDelegate;
    this[childrenDelegate$] = childrenDelegate;
    this[restrictDragScope$] = restrictDragScope;
    this[reverse$] = reverse;
    this[primary$] = primary;
    this[physics$] = physics;
    this[shrinkWrap$] = shrinkWrap;
    this[padding$] = padding;
    this[cacheExtent$] = cacheExtent;
    this[semanticChildCount$] = semanticChildCount;
    this[keyboardDismissBehavior$] = keyboardDismissBehavior;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[controller$] = controller;
    this[dragStartBehavior$] = dragStartBehavior;
    this[dragStartDelay$] = dragStartDelay;
    this[dragEnabled$] = dragEnabled;
    reorderable_grid_view.ReorderableGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  dart.addTypeTests(reorderable_grid_view.ReorderableGridView);
  dart.addTypeCaches(reorderable_grid_view.ReorderableGridView);
  dart.setMethodSignature(reorderable_grid_view.ReorderableGridView, () => ({
    __proto__: dart.getMethods(reorderable_grid_view.ReorderableGridView.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setStaticMethodSignature(reorderable_grid_view.ReorderableGridView, () => ['count']);
  dart.setLibraryUri(reorderable_grid_view.ReorderableGridView, I[1]);
  dart.setFieldSignature(reorderable_grid_view.ReorderableGridView, () => ({
    __proto__: dart.getFields(reorderable_grid_view.ReorderableGridView.__proto__),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    dragWidgetBuilderV2: dart.finalFieldType(dart.nullable(reorderable_grid_view.DragWidgetBuilderV2)),
    scrollSpeedController: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [core.int, core.double, core.double]))),
    placeholderBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [core.int, core.int, framework.Widget]))),
    onDragStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    onDragUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int, ui.Offset, ui.Offset]))),
    primary: dart.finalFieldType(dart.nullable(core.bool)),
    shrinkWrap: dart.finalFieldType(core.bool),
    restrictDragScope: dart.finalFieldType(core.bool),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    reverse: dart.finalFieldType(core.bool),
    cacheExtent: dart.finalFieldType(dart.nullable(core.double)),
    semanticChildCount: dart.finalFieldType(dart.nullable(core.int)),
    keyboardDismissBehavior: dart.finalFieldType(scroll_view.ScrollViewKeyboardDismissBehavior),
    clipBehavior: dart.finalFieldType(ui.Clip),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    childrenDelegate: dart.finalFieldType(sliver.SliverChildDelegate),
    gridDelegate: dart.finalFieldType(sliver_grid.SliverGridDelegate),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    dragStartDelay: dart.finalFieldType(dart.nullable(core.Duration)),
    dragEnabled: dart.finalFieldType(dart.nullable(core.bool))
  }));
  var crossAxisCount$ = dart.privateName(reorderable_wrapper_widget, "GridChildPosDelegate.crossAxisCount");
  var crossAxisSpacing$ = dart.privateName(reorderable_wrapper_widget, "GridChildPosDelegate.crossAxisSpacing");
  var mainAxisSpacing$ = dart.privateName(reorderable_wrapper_widget, "GridChildPosDelegate.mainAxisSpacing");
  var childAspectRatio$ = dart.privateName(reorderable_wrapper_widget, "GridChildPosDelegate.childAspectRatio");
  reorderable_grid_mixin.ReorderableChildPosDelegate = class ReorderableChildPosDelegate extends core.Object {};
  (reorderable_grid_mixin.ReorderableChildPosDelegate.new = function() {
    ;
  }).prototype = reorderable_grid_mixin.ReorderableChildPosDelegate.prototype;
  dart.addTypeTests(reorderable_grid_mixin.ReorderableChildPosDelegate);
  dart.addTypeCaches(reorderable_grid_mixin.ReorderableChildPosDelegate);
  dart.setLibraryUri(reorderable_grid_mixin.ReorderableChildPosDelegate, I[3]);
  reorderable_wrapper_widget.GridChildPosDelegate = class GridChildPosDelegate extends reorderable_grid_mixin.ReorderableChildPosDelegate {
    get crossAxisCount() {
      return this[crossAxisCount$];
    }
    set crossAxisCount(value) {
      super.crossAxisCount = value;
    }
    get crossAxisSpacing() {
      return this[crossAxisSpacing$];
    }
    set crossAxisSpacing(value) {
      super.crossAxisSpacing = value;
    }
    get mainAxisSpacing() {
      return this[mainAxisSpacing$];
    }
    set mainAxisSpacing(value) {
      super.mainAxisSpacing = value;
    }
    get childAspectRatio() {
      return this[childAspectRatio$];
    }
    set childAspectRatio(value) {
      super.childAspectRatio = value;
    }
    static ['_#new#tearOff'](opts) {
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      return new reorderable_wrapper_widget.GridChildPosDelegate.new({crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio});
    }
    getPos(index, items, context) {
      let t0;
      let child = items[$_get](index);
      let childObject = (t0 = child, t0 == null ? null : t0.context.findRenderObject());
      if (childObject == null) {
        util.debug("index: " + dart.str(index) + " is null");
      } else {
        if (sliver$.RenderSliver.is(childObject)) {
          util.debug("index: " + dart.str(index) + ", pos: " + dart.str(childObject.constraints));
        } else if (box$.RenderBox.is(childObject)) {
          util.debug("index: " + dart.str(index) + ", pos: " + dart.str(childObject.semanticBounds));
        } else {
          util.debug("index: " + dart.str(index) + ", " + dart.str(childObject));
        }
      }
      let width = null;
      let renderObject = context.findRenderObject();
      if (renderObject == null) {
        return ui.Offset.zero;
      }
      if (sliver$.RenderSliver.is(renderObject)) {
        width = renderObject.constraints.crossAxisExtent;
      } else {
        width = box$.RenderBox.as(renderObject).size.width;
      }
      let itemWidth = (width - (this.crossAxisCount - 1) * this.crossAxisSpacing) / this.crossAxisCount;
      let row = (index / this.crossAxisCount)[$truncate]();
      let col = index[$modulo](this.crossAxisCount);
      let x = (col - 1) * (itemWidth + this.crossAxisSpacing);
      let y = (row - 1) * (itemWidth / this.childAspectRatio + this.mainAxisSpacing);
      return new ui.Offset.new(x, y);
    }
  };
  (reorderable_wrapper_widget.GridChildPosDelegate.new = function(opts) {
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
    this[crossAxisCount$] = crossAxisCount;
    this[mainAxisSpacing$] = mainAxisSpacing;
    this[crossAxisSpacing$] = crossAxisSpacing;
    this[childAspectRatio$] = childAspectRatio;
    reorderable_wrapper_widget.GridChildPosDelegate.__proto__.new.call(this);
    ;
  }).prototype = reorderable_wrapper_widget.GridChildPosDelegate.prototype;
  dart.addTypeTests(reorderable_wrapper_widget.GridChildPosDelegate);
  dart.addTypeCaches(reorderable_wrapper_widget.GridChildPosDelegate);
  dart.setMethodSignature(reorderable_wrapper_widget.GridChildPosDelegate, () => ({
    __proto__: dart.getMethods(reorderable_wrapper_widget.GridChildPosDelegate.__proto__),
    getPos: dart.fnType(ui.Offset, [core.int, core.Map$(core.int, reorderable_item.ReorderableItemViewState), framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_wrapper_widget.GridChildPosDelegate, I[4]);
  dart.setFieldSignature(reorderable_wrapper_widget.GridChildPosDelegate, () => ({
    __proto__: dart.getFields(reorderable_wrapper_widget.GridChildPosDelegate.__proto__),
    crossAxisCount: dart.finalFieldType(core.int),
    crossAxisSpacing: dart.finalFieldType(core.double),
    mainAxisSpacing: dart.finalFieldType(core.double),
    childAspectRatio: dart.finalFieldType(core.double)
  }));
  var onReorder$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.onReorder");
  var dragWidgetBuilder$ = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.dragWidgetBuilder");
  var scrollSpeedController$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.scrollSpeedController");
  var placeholderBuilder$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.placeholderBuilder");
  var posDelegate$ = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.posDelegate");
  var onDragStart$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.onDragStart");
  var onDragUpdate$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.onDragUpdate");
  var child$ = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.child");
  var dragEnabled$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.dragEnabled");
  var dragStartDelay$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.dragStartDelay");
  var isSliver$ = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.isSliver");
  var restrictDragScope$0 = dart.privateName(reorderable_wrapper_widget, "ReorderableWrapperWidget.restrictDragScope");
  reorderable_grid_mixin.ReorderableGridWidgetMixin = class ReorderableGridWidgetMixin extends framework.StatefulWidget {};
  reorderable_grid_mixin.ReorderableGridWidgetMixin[dart.mixinOn] = StatefulWidget => class ReorderableGridWidgetMixin extends StatefulWidget {};
  dart.addTypeTests(reorderable_grid_mixin.ReorderableGridWidgetMixin);
  dart.addTypeCaches(reorderable_grid_mixin.ReorderableGridWidgetMixin);
  reorderable_grid_mixin.ReorderableGridWidgetMixin[dart.implements] = () => [framework.StatefulWidget];
  dart.setLibraryUri(reorderable_grid_mixin.ReorderableGridWidgetMixin, I[3]);
  const StatefulWidget_ReorderableGridWidgetMixin$36 = class StatefulWidget_ReorderableGridWidgetMixin extends framework.StatefulWidget {};
  (StatefulWidget_ReorderableGridWidgetMixin$36.new = function(opts) {
    StatefulWidget_ReorderableGridWidgetMixin$36.__proto__.new.call(this, opts);
  }).prototype = StatefulWidget_ReorderableGridWidgetMixin$36.prototype;
  dart.applyMixin(StatefulWidget_ReorderableGridWidgetMixin$36, reorderable_grid_mixin.ReorderableGridWidgetMixin);
  reorderable_wrapper_widget.ReorderableWrapperWidget = class ReorderableWrapperWidget extends StatefulWidget_ReorderableGridWidgetMixin$36 {
    get onReorder() {
      return this[onReorder$0];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get dragWidgetBuilder() {
      return this[dragWidgetBuilder$];
    }
    set dragWidgetBuilder(value) {
      super.dragWidgetBuilder = value;
    }
    get scrollSpeedController() {
      return this[scrollSpeedController$0];
    }
    set scrollSpeedController(value) {
      super.scrollSpeedController = value;
    }
    get placeholderBuilder() {
      return this[placeholderBuilder$0];
    }
    set placeholderBuilder(value) {
      super.placeholderBuilder = value;
    }
    get posDelegate() {
      return this[posDelegate$];
    }
    set posDelegate(value) {
      super.posDelegate = value;
    }
    get onDragStart() {
      return this[onDragStart$0];
    }
    set onDragStart(value) {
      super.onDragStart = value;
    }
    get onDragUpdate() {
      return this[onDragUpdate$0];
    }
    set onDragUpdate(value) {
      super.onDragUpdate = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get dragEnabled() {
      return this[dragEnabled$0];
    }
    set dragEnabled(value) {
      super.dragEnabled = value;
    }
    get dragStartDelay() {
      return this[dragStartDelay$0];
    }
    set dragStartDelay(value) {
      super.dragStartDelay = value;
    }
    get isSliver() {
      return this[isSliver$];
    }
    set isSliver(value) {
      super.isSliver = value;
    }
    get restrictDragScope() {
      return this[restrictDragScope$0];
    }
    set restrictDragScope(value) {
      super.restrictDragScope = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
      let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let posDelegate = opts && 'posDelegate' in opts ? opts.posDelegate : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
      let isSliver = opts && 'isSliver' in opts ? opts.isSliver : null;
      return new reorderable_wrapper_widget.ReorderableWrapperWidget.new({key: key, child: child, onReorder: onReorder, restrictDragScope: restrictDragScope, dragWidgetBuilder: dragWidgetBuilder, scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, posDelegate: posDelegate, onDragStart: onDragStart, onDragUpdate: onDragUpdate, dragEnabled: dragEnabled, dragStartDelay: dragStartDelay, isSliver: isSliver});
    }
    createState() {
      return new reorderable_wrapper_widget.ReorderableWrapperWidgetState.new();
    }
  };
  (reorderable_wrapper_widget.ReorderableWrapperWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let restrictDragScope = opts && 'restrictDragScope' in opts ? opts.restrictDragScope : false;
    let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
    let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let posDelegate = opts && 'posDelegate' in opts ? opts.posDelegate : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : null;
    let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : null;
    let isSliver = opts && 'isSliver' in opts ? opts.isSliver : null;
    this[child$] = child;
    this[onReorder$0] = onReorder;
    this[restrictDragScope$0] = restrictDragScope;
    this[dragWidgetBuilder$] = dragWidgetBuilder;
    this[scrollSpeedController$0] = scrollSpeedController;
    this[placeholderBuilder$0] = placeholderBuilder;
    this[posDelegate$] = posDelegate;
    this[onDragStart$0] = onDragStart;
    this[onDragUpdate$0] = onDragUpdate;
    this[dragEnabled$0] = dragEnabled;
    this[dragStartDelay$0] = dragStartDelay;
    this[isSliver$] = isSliver;
    reorderable_wrapper_widget.ReorderableWrapperWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_wrapper_widget.ReorderableWrapperWidget.prototype;
  dart.addTypeTests(reorderable_wrapper_widget.ReorderableWrapperWidget);
  dart.addTypeCaches(reorderable_wrapper_widget.ReorderableWrapperWidget);
  dart.setMethodSignature(reorderable_wrapper_widget.ReorderableWrapperWidget, () => ({
    __proto__: dart.getMethods(reorderable_wrapper_widget.ReorderableWrapperWidget.__proto__),
    createState: dart.fnType(reorderable_wrapper_widget.ReorderableWrapperWidgetState, [])
  }));
  dart.setLibraryUri(reorderable_wrapper_widget.ReorderableWrapperWidget, I[4]);
  dart.setFieldSignature(reorderable_wrapper_widget.ReorderableWrapperWidget, () => ({
    __proto__: dart.getFields(reorderable_wrapper_widget.ReorderableWrapperWidget.__proto__),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    dragWidgetBuilder: dart.finalFieldType(dart.nullable(reorderable_grid_view.DragWidgetBuilderV2)),
    scrollSpeedController: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [core.int, core.double, core.double]))),
    placeholderBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [core.int, core.int, framework.Widget]))),
    posDelegate: dart.finalFieldType(dart.nullable(reorderable_grid_mixin.ReorderableChildPosDelegate)),
    onDragStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    onDragUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int, ui.Offset, ui.Offset]))),
    child: dart.finalFieldType(framework.Widget),
    dragEnabled: dart.finalFieldType(dart.nullable(core.bool)),
    dragStartDelay: dart.finalFieldType(dart.nullable(core.Duration)),
    isSliver: dart.finalFieldType(dart.nullable(core.bool)),
    restrictDragScope: dart.finalFieldType(core.bool)
  }));
  var overlayKey = dart.privateName(reorderable_grid_mixin, "ReorderableGridStateMixin.overlayKey");
  var _recognizer = dart.privateName(reorderable_grid_mixin, "_recognizer");
  var _dragIndex = dart.privateName(reorderable_grid_mixin, "_dragIndex");
  var _dropIndex = dart.privateName(reorderable_grid_mixin, "_dropIndex");
  var __items = dart.privateName(reorderable_grid_mixin, "__items");
  var _dragInfo = dart.privateName(reorderable_grid_mixin, "_dragInfo");
  var _dragReset = dart.privateName(reorderable_grid_mixin, "_dragReset");
  var _onDragStart = dart.privateName(reorderable_grid_mixin, "_onDragStart");
  var _calcDropIndex = dart.privateName(reorderable_grid_mixin, "_calcDropIndex");
  var _onDragUpdate = dart.privateName(reorderable_grid_mixin, "_onDragUpdate");
  var _onDragCancel = dart.privateName(reorderable_grid_mixin, "_onDragCancel");
  var _onDragEnd = dart.privateName(reorderable_grid_mixin, "_onDragEnd");
  var _startDrag = dart.privateName(reorderable_grid_mixin, "_startDrag");
  const _is_ReorderableGridStateMixin_default = Symbol('_is_ReorderableGridStateMixin_default');
  reorderable_grid_mixin.ReorderableGridStateMixin$ = dart.generic(T => {
    class ReorderableGridStateMixin extends core.Object {
      static of(context) {
        return dart.nullCheck(context.findAncestorStateOfType(T$.ReorderableGridStateMixinOfReorderableGridWidgetMixin()));
      }
    }
    ReorderableGridStateMixin[dart.mixinOn] = _ReorderableGridStateMixin$36State$36TickerProviderStateMixin => class ReorderableGridStateMixin extends _ReorderableGridStateMixin$36State$36TickerProviderStateMixin {
      get overlayKey() {
        return this[overlayKey];
      }
      set overlayKey(value) {
        this[overlayKey] = value;
      }
      get dragStartDelay() {
        let t0;
        t0 = this.widget.dragStartDelay;
        return t0 == null ? constants.kLongPressTimeout : t0;
      }
      get dragEnabled() {
        let t0;
        t0 = this.widget.dragEnabled;
        return t0 == null ? true : t0;
      }
      startDragRecognizer(index, event, recognizer) {
        this.setState(dart.fn(() => {
          let t0;
          if (this[_dragIndex] != null) {
            this[_dragReset]();
          }
          this[_dragIndex] = index;
          this[_recognizer] = (t0 = recognizer, (() => {
            t0.onStart = dart.bind(this, _onDragStart);
            t0.addPointer(event);
            return t0;
          })());
        }, T$.VoidTovoid()));
      }
      get dropIndex() {
        let t0;
        t0 = this[_dropIndex];
        return t0 == null ? -1 : t0;
      }
      get placeholderBuilder() {
        return this.widget.placeholderBuilder;
      }
      getOverlay() {
        return this.overlayKey.currentState;
      }
      containsByIndex(index) {
        return this[__items][$containsKey](index);
      }
      getPosByOffset(index, dIndex) {
        let keys = this[__items][$keys][$toList]();
        let keyIndex = keys[$indexOf](index);
        keyIndex = keyIndex + dIndex;
        if (keyIndex < 0) {
          keyIndex = 0;
        }
        if (keyIndex > keys[$length] - 1) {
          keyIndex = keys[$length] - 1;
        }
        return this.getPosByIndex(keys[$_get](keyIndex), {safe: true});
      }
      getPosByIndex(index, opts) {
        let t0, t0$;
        let safe = opts && 'safe' in opts ? opts.safe : true;
        if (safe) {
          if (index < 0) {
            index = 0;
          }
        }
        if (index < 0) {
          return ui.Offset.zero;
        }
        let child = this[__items][$_get](index);
        if (child == null) {
          util.debug("why child is null for index: " + dart.str(index) + ", and __item: " + dart.str(this[__items]));
        }
        let thisRenderObject = this.context.findRenderObject();
        if (sliver_grid.RenderSliverGrid.is(thisRenderObject)) {
          let renderObject = thisRenderObject;
          let constraints = renderObject.constraints;
          let layout = renderObject.gridDelegate.getLayout(constraints);
          let fixedIndex = (t0 = dart.nullCheck(child).indexInAll, t0 == null ? child.index : t0);
          let gridGeometry = layout.getGeometryForChildIndex(fixedIndex);
          let rst = new ui.Offset.new(gridGeometry.crossAxisOffset, gridGeometry.scrollOffset);
          return rst;
        }
        let renderObject = (t0$ = child, t0$ == null ? null : t0$.context.findRenderObject());
        if (renderObject == null) {
          return ui.Offset.zero;
        }
        let box = box$.RenderBox.as(renderObject);
        let parentRenderObject = box$.RenderBox.as(this.context.findRenderObject());
        let pos = parentRenderObject.globalToLocal(box.localToGlobal(ui.Offset.zero));
        return pos;
      }
      [_calcDropIndex](defaultIndex) {
        if (this[_dragInfo] == null) {
          return defaultIndex;
        }
        for (let item of this[__items][$values]) {
          let box = box$.RenderBox.as(item.context.findRenderObject());
          let pos = box.globalToLocal(dart.nullCheck(this[_dragInfo]).getCenterInGlobal());
          if (pos.dx > 0 && pos.dy > 0 && pos.dx < box.size.width && pos.dy < box.size.height) {
            return item.index;
          }
        }
        return defaultIndex;
      }
      getOffsetInDrag(index) {
        if (this[_dragInfo] == null || this[_dropIndex] == null || this[_dragIndex] == this[_dropIndex]) {
          return ui.Offset.zero;
        }
        let inDragRange = false;
        let isMoveLeft = dart.nullCheck(this[_dropIndex]) > dart.nullCheck(this[_dragIndex]);
        let minPos = math.min(core.int, dart.nullCheck(this[_dragIndex]), dart.nullCheck(this[_dropIndex]));
        let maxPos = math.max(core.int, dart.nullCheck(this[_dragIndex]), dart.nullCheck(this[_dropIndex]));
        if (index >= minPos && index <= maxPos) {
          inDragRange = true;
        }
        if (!inDragRange) {
          return ui.Offset.zero;
        } else {
          if (isMoveLeft) {
            if (!this.containsByIndex(index - 1) || !this.containsByIndex(index)) {
              return ui.Offset.zero;
            }
            return this.getPosByIndex(index - 1)['-'](this.getPosByIndex(index));
          } else {
            if (!this.containsByIndex(index + 1) || !this.containsByIndex(index)) {
              return ui.Offset.zero;
            }
            return this.getPosByIndex(index + 1)['-'](this.getPosByIndex(index));
          }
        }
      }
      build(context) {
        let t1, t0;
        if (dart.test((t0 = this.widget.isSliver, t0 == null ? false || !dart.test((t1 = this.widget.restrictDragScope, t1 == null ? false : t1)) : t0))) {
          return this.widget.child;
        }
        return new basic.Stack.new({children: T$.JSArrayOfWidget().of([this.widget.child, new overlay$.Overlay.new({key: this.overlayKey})])});
      }
      [_onDragStart](position) {
        let t0;
        util.debug("_onDragStart: " + dart.str(position) + ", __dragIndex: " + dart.str(this[_dragIndex]));
        if (!(this[_dragInfo] == null)) dart.assertFailed(null, I[5], 221, 12, "_dragInfo == null");
        t0 = this.widget.onDragStart;
        t0 == null ? null : t0(dart.nullCheck(this[_dragIndex]));
        let item = dart.nullCheck(this[__items][$_get](dart.nullCheck(this[_dragIndex])));
        this[_dropIndex] = this[_dragIndex];
        this[_dragInfo] = new drag_info.DragInfo.new({item: item, tickerProvider: this, overlay: this.getOverlay(), context: this.context, dragWidgetBuilder: this.widget.dragWidgetBuilder, scrollSpeedController: this.widget.scrollSpeedController, onStart: dart.bind(this, _onDragStart), dragPosition: position, onUpdate: dart.bind(this, _onDragUpdate), onCancel: dart.bind(this, _onDragCancel), onEnd: dart.bind(this, _onDragEnd), readyCallback: dart.fn(() => {
            item.dragging = true;
            item.rebuild();
            this.updateDragTarget();
          }, T$.VoidTovoid())});
        this[_startDrag](item);
        return dart.nullCheck(this[_dragInfo]);
      }
      [_startDrag](item) {
        return async.async(dart.void, (function* _startDrag() {
          let t0, t0$, t0$0, t0$1, t0$2;
          if (this[_dragInfo] == null) {
            return;
          }
          if (dart.test((t0$ = (t0 = this.widget.dragWidgetBuilder, t0 == null ? null : t0.isScreenshotDragWidget), t0$ == null ? false : t0$))) {
            let screenshot = (yield util.takeScreenShot(item));
            let byteData = (yield (t0$0 = screenshot, t0$0 == null ? null : t0$0.toByteData({format: ui.ImageByteFormat.png})));
            if (byteData != null) {
              t0$1 = this[_dragInfo];
              t0$1 == null ? null : t0$1.startDrag(new image_provider.MemoryImage.new(byteData[$buffer][$asUint8List]()));
            }
          } else {
            t0$2 = this[_dragInfo];
            t0$2 == null ? null : t0$2.startDrag(null);
          }
        }).bind(this));
      }
      [_onDragUpdate](item, position, delta) {
        let t0;
        t0 = this.widget.onDragUpdate;
        t0 == null ? null : t0(dart.nullCheck(this[_dragIndex]), position, delta);
        this.updateDragTarget();
      }
      [_onDragCancel](item) {
        this[_dragReset]();
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
      [_onDragEnd](item) {
        let t2, t1, t0;
        t0 = this.widget;
        t1 = dart.nullCheck(this[_dragIndex]);
        t2 = dart.nullCheck(this[_dropIndex]);
        t0.onReorder(t1, t2);
        this[_dragReset]();
      }
      [_dragReset]() {
        let t0, t0$;
        if (this[_dragIndex] != null) {
          if (this[__items][$containsKey](dart.nullCheck(this[_dragIndex]))) {
            let item = dart.nullCheck(this[__items][$_get](dart.nullCheck(this[_dragIndex])));
            item.dragging = false;
            item.rebuild();
          }
          this[_dragIndex] = null;
          this[_dropIndex] = null;
          for (let item of this[__items][$values]) {
            item.resetGap();
          }
        }
        t0 = this[_recognizer];
        t0 == null ? null : t0.dispose();
        this[_recognizer] = null;
        t0$ = this[_dragInfo];
        t0$ == null ? null : t0$.dispose();
        this[_dragInfo] = null;
      }
      reorder(startIndex, endIndex) {
        this.setState(dart.fn(() => {
          let t2, t1, t0;
          if (startIndex !== endIndex) {
            t0 = this.widget;
            t1 = startIndex;
            t2 = endIndex;
            t0.onReorder(t1, t2);
          }
        }, T$.VoidTovoid()));
      }
      registerItem(item) {
        let t0;
        this[__items][$_set](item.index, item);
        if (item.index === (t0 = this[_dragInfo], t0 == null ? null : t0.index)) {
          item.dragging = true;
          item.rebuild();
        }
      }
      unRegisterItem(index, item) {
        let current = this[__items][$_get](index);
        if (dart.equals(current, item)) {
          this[__items][$remove](index);
        }
      }
      updateDragTarget() {
        return async.async(dart.void, (function* updateDragTarget() {
          let newTargetIndex = this[_calcDropIndex](dart.nullCheck(this[_dropIndex]));
          if (newTargetIndex !== this[_dropIndex]) {
            this[_dropIndex] = newTargetIndex;
            for (let item of this[__items][$values]) {
              item.updateForGap(dart.nullCheck(this[_dropIndex]));
            }
          }
        }).bind(this));
      }
    };
    (ReorderableGridStateMixin[dart.mixinNew] = function() {
      this[_recognizer] = null;
      this[overlayKey] = T$.GlobalKeyOfOverlayState().new();
      this[_dragIndex] = null;
      this[_dropIndex] = null;
      this[__items] = new (T$.IdentityMapOfint$ReorderableItemViewState()).new();
      this[_dragInfo] = null;
    }).prototype = ReorderableGridStateMixin.prototype;
    dart.addTypeTests(ReorderableGridStateMixin);
    ReorderableGridStateMixin.prototype[_is_ReorderableGridStateMixin_default] = true;
    dart.addTypeCaches(ReorderableGridStateMixin);
    ReorderableGridStateMixin[dart.implements] = () => [ticker_provider.TickerProviderStateMixin$(T), framework.State$(T)];
    dart.setMethodSignature(ReorderableGridStateMixin, () => ({
      __proto__: dart.getMethods(ReorderableGridStateMixin.__proto__),
      startDragRecognizer: dart.fnType(dart.void, [core.int, events.PointerDownEvent, multidrag.MultiDragGestureRecognizer]),
      getOverlay: dart.fnType(dart.nullable(overlay$.OverlayState), []),
      containsByIndex: dart.fnType(core.bool, [core.int]),
      getPosByOffset: dart.fnType(ui.Offset, [core.int, core.int]),
      getPosByIndex: dart.fnType(ui.Offset, [core.int], {safe: core.bool}, {}),
      [_calcDropIndex]: dart.fnType(core.int, [core.int]),
      getOffsetInDrag: dart.fnType(ui.Offset, [core.int]),
      build: dart.fnType(framework.Widget, [framework.BuildContext]),
      [_onDragStart]: dart.fnType(drag.Drag, [ui.Offset]),
      [_startDrag]: dart.fnType(dart.void, [reorderable_item.ReorderableItemViewState]),
      [_onDragUpdate]: dart.fnType(dart.dynamic, [drag_info.DragInfo, ui.Offset, ui.Offset]),
      [_onDragCancel]: dart.fnType(dart.dynamic, [drag_info.DragInfo]),
      [_onDragEnd]: dart.fnType(dart.dynamic, [drag_info.DragInfo]),
      [_dragReset]: dart.fnType(dart.dynamic, []),
      reorder: dart.fnType(dart.void, [core.int, core.int]),
      registerItem: dart.fnType(dart.void, [reorderable_item.ReorderableItemViewState]),
      unRegisterItem: dart.fnType(dart.void, [core.int, reorderable_item.ReorderableItemViewState]),
      updateDragTarget: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setStaticMethodSignature(ReorderableGridStateMixin, () => ['of']);
    dart.setGetterSignature(ReorderableGridStateMixin, () => ({
      __proto__: dart.getGetters(ReorderableGridStateMixin.__proto__),
      dragStartDelay: core.Duration,
      dragEnabled: core.bool,
      dropIndex: core.int,
      placeholderBuilder: dart.nullable(dart.fnType(framework.Widget, [core.int, core.int, framework.Widget]))
    }));
    dart.setLibraryUri(ReorderableGridStateMixin, I[3]);
    dart.setFieldSignature(ReorderableGridStateMixin, () => ({
      __proto__: dart.getFields(ReorderableGridStateMixin.__proto__),
      [_recognizer]: dart.fieldType(dart.nullable(multidrag.MultiDragGestureRecognizer)),
      overlayKey: dart.fieldType(framework.GlobalKey$(overlay$.OverlayState)),
      [_dragIndex]: dart.fieldType(dart.nullable(core.int)),
      [_dropIndex]: dart.fieldType(dart.nullable(core.int)),
      [__items]: dart.finalFieldType(core.Map$(core.int, reorderable_item.ReorderableItemViewState)),
      [_dragInfo]: dart.fieldType(dart.nullable(drag_info.DragInfo))
    }));
    return ReorderableGridStateMixin;
  });
  reorderable_grid_mixin.ReorderableGridStateMixin = reorderable_grid_mixin.ReorderableGridStateMixin$();
  dart.addTypeTests(reorderable_grid_mixin.ReorderableGridStateMixin, _is_ReorderableGridStateMixin_default);
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(reorderable_wrapper_widget.ReorderableWrapperWidget) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(reorderable_wrapper_widget.ReorderableWrapperWidget)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(reorderable_wrapper_widget.ReorderableWrapperWidget));
  const State_ReorderableGridStateMixin$36 = class State_ReorderableGridStateMixin extends State_TickerProviderStateMixin$36 {};
  (State_ReorderableGridStateMixin$36.new = function() {
    reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_wrapper_widget.ReorderableWrapperWidget)[dart.mixinNew].call(this);
    State_ReorderableGridStateMixin$36.__proto__.new.call(this);
  }).prototype = State_ReorderableGridStateMixin$36.prototype;
  dart.applyMixin(State_ReorderableGridStateMixin$36, reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_wrapper_widget.ReorderableWrapperWidget));
  reorderable_wrapper_widget.ReorderableWrapperWidgetState = class ReorderableWrapperWidgetState extends State_ReorderableGridStateMixin$36 {
    static ['_#new#tearOff']() {
      return new reorderable_wrapper_widget.ReorderableWrapperWidgetState.new();
    }
  };
  (reorderable_wrapper_widget.ReorderableWrapperWidgetState.new = function() {
    reorderable_wrapper_widget.ReorderableWrapperWidgetState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_wrapper_widget.ReorderableWrapperWidgetState.prototype;
  dart.addTypeTests(reorderable_wrapper_widget.ReorderableWrapperWidgetState);
  dart.addTypeCaches(reorderable_wrapper_widget.ReorderableWrapperWidgetState);
  dart.setLibraryUri(reorderable_wrapper_widget.ReorderableWrapperWidgetState, I[4]);
  var child$0 = dart.privateName(reorderable_item, "ReorderableItemView.child");
  var index$ = dart.privateName(reorderable_item, "ReorderableItemView.index");
  var indexInAll$ = dart.privateName(reorderable_item, "ReorderableItemView.indexInAll");
  reorderable_item.ReorderableItemView = class ReorderableItemView extends framework.StatefulWidget {
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get indexInAll() {
      return this[indexInAll$];
    }
    set indexInAll(value) {
      super.indexInAll = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let indexInAll = opts && 'indexInAll' in opts ? opts.indexInAll : null;
      return new reorderable_item.ReorderableItemView.new({key: key, child: child, index: index, indexInAll: indexInAll});
    }
    static wrapMeList(header, children, footer) {
      let t0, t0$, t0$0, t0$1;
      let rst = T$.JSArrayOfWidget().of([]);
      rst[$addAll]((t0 = header, t0 == null ? T$.JSArrayOfWidget().of([]) : t0));
      for (let i = 0; i < children[$length]; i = i + 1) {
        let child = children[$_get](i);
        if (!dart.fn(() => {
          if (child.key == null) {
            dart.throw(assertions.FlutterError.new("Every item of ReorderableGridView must have a key."));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[6], 30, 14, "() {\n        if (child.key == null) {\n          throw FlutterError(\n            'Every item of ReorderableGridView must have a key.',\n          );\n        }\n        return true;\n      }()");
        rst[$add](new reorderable_item.ReorderableItemView.new({key: dart.nullCheck(child.key), index: i, indexInAll: i + dart.notNull((t0$0 = (t0$ = header, t0$ == null ? null : t0$[$length]), t0$0 == null ? 0 : t0$0)), child: child}));
      }
      rst[$addAll]((t0$1 = footer, t0$1 == null ? T$.JSArrayOfWidget().of([]) : t0$1));
      return rst;
    }
    createState() {
      return new reorderable_item.ReorderableItemViewState.new();
    }
  };
  (reorderable_item.ReorderableItemView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let indexInAll = opts && 'indexInAll' in opts ? opts.indexInAll : null;
    this[child$0] = child;
    this[index$] = index;
    this[indexInAll$] = indexInAll;
    reorderable_item.ReorderableItemView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_item.ReorderableItemView.prototype;
  dart.addTypeTests(reorderable_item.ReorderableItemView);
  dart.addTypeCaches(reorderable_item.ReorderableItemView);
  dart.setMethodSignature(reorderable_item.ReorderableItemView, () => ({
    __proto__: dart.getMethods(reorderable_item.ReorderableItemView.__proto__),
    createState: dart.fnType(framework.State$(reorderable_item.ReorderableItemView), [])
  }));
  dart.setStaticMethodSignature(reorderable_item.ReorderableItemView, () => ['wrapMeList']);
  dart.setLibraryUri(reorderable_item.ReorderableItemView, I[7]);
  dart.setFieldSignature(reorderable_item.ReorderableItemView, () => ({
    __proto__: dart.getFields(reorderable_item.ReorderableItemView.__proto__),
    child: dart.finalFieldType(framework.Widget),
    index: dart.finalFieldType(core.int),
    indexInAll: dart.finalFieldType(dart.nullable(core.int))
  }));
  var childKey = dart.privateName(reorderable_item, "ReorderableItemViewState.childKey");
  var __ReorderableItemViewState__listState = dart.privateName(reorderable_item, "_#ReorderableItemViewState#_listState");
  var _dragging = dart.privateName(reorderable_item, "_dragging");
  var _startOffset = dart.privateName(reorderable_item, "_startOffset");
  var _targetOffset = dart.privateName(reorderable_item, "_targetOffset");
  var _offsetAnimation = dart.privateName(reorderable_item, "_offsetAnimation");
  var _placeholderOffset = dart.privateName(reorderable_item, "_placeholderOffset");
  var _listState = dart.privateName(reorderable_item, "_listState");
  var _checkPlaceHolder = dart.privateName(reorderable_item, "_checkPlaceHolder");
  var _createDragRecognizer = dart.privateName(reorderable_item, "_createDragRecognizer");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  var _buildPlaceHolder = dart.privateName(reorderable_item, "_buildPlaceHolder");
  const State_TickerProviderStateMixin$36$ = class State_TickerProviderStateMixin extends framework.State$(reorderable_item.ReorderableItemView) {};
  (State_TickerProviderStateMixin$36$.new = function() {
    ticker_provider.TickerProviderStateMixin$(reorderable_item.ReorderableItemView)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$, ticker_provider.TickerProviderStateMixin$(reorderable_item.ReorderableItemView));
  reorderable_item.ReorderableItemViewState = class ReorderableItemViewState extends State_TickerProviderStateMixin$36$ {
    get childKey() {
      return this[childKey];
    }
    set childKey(value) {
      super.childKey = value;
    }
    get [_listState]() {
      let t0;
      t0 = this[__ReorderableItemViewState__listState];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_listState")) : t0;
    }
    set [_listState](_listState$35param) {
      this[__ReorderableItemViewState__listState] = _listState$35param;
    }
    get key() {
      return dart.nullCheck(this.widget.key);
    }
    get child() {
      return this.widget.child;
    }
    get index() {
      return this.widget.index;
    }
    get indexInAll() {
      return this.widget.indexInAll;
    }
    set dragging(dragging) {
      if (this.mounted) {
        this.setState(dart.fn(() => {
          this[_dragging] = dragging;
        }, T$.VoidTovoid()));
      }
    }
    getRelativePos(dragPosition) {
      let parentRenderBox = box$.RenderBox.as(this[_listState].context.findRenderObject());
      let parentOffset = parentRenderBox.localToGlobal(dragPosition);
      let renderBox = box$.RenderBox.as(this.context.findRenderObject());
      return renderBox.localToGlobal(parentOffset);
    }
    get parentRenderBox() {
      return box$.RenderBox.as(this[_listState].context.findRenderObject());
    }
    updateForGap(dropIndex) {
      let t0, t0$;
      if (!this.mounted) return;
      if (!this[_listState].containsByIndex(this.index)) {
        return;
      }
      this[_checkPlaceHolder]();
      if (this[_dragging]) {
        return;
      }
      let newOffset = this[_listState].getOffsetInDrag(this.index);
      if (!newOffset._equals(this[_targetOffset])) {
        this[_targetOffset] = newOffset;
        if (this[_offsetAnimation] == null) {
          this[_offsetAnimation] = (t0 = new animation_controller.AnimationController.new({vsync: this[_listState]}), (() => {
            t0.duration = C[6] || CT.C6;
            t0.addListener(dart.bind(this, 'rebuild'));
            t0.addStatusListener(dart.fn(status => {
              let t1;
              if (status === animation.AnimationStatus.completed) {
                this[_startOffset] = this[_targetOffset];
                t1 = this[_offsetAnimation];
                t1 == null ? null : t1.dispose();
                this[_offsetAnimation] = null;
              }
            }, T$.AnimationStatusTovoid()));
            t0.forward({from: 0});
            return t0;
          })());
        } else {
          this[_startOffset] = this.offset;
          t0$ = this[_offsetAnimation];
          t0$ == null ? null : t0$.forward({from: 0});
        }
      }
    }
    [_checkPlaceHolder]() {
      if (!this[_dragging]) {
        return;
      }
      let selfPos = this.index;
      let targetPos = this[_listState].dropIndex;
      if (targetPos < 0) {
        return;
      }
      if (selfPos === targetPos) {
        this.setState(dart.fn(() => {
          this[_placeholderOffset] = ui.Offset.zero;
        }, T$.VoidTovoid()));
      }
      if (selfPos !== targetPos) {
        this.setState(dart.fn(() => {
          util.debug("_buildPlaceHolder for index " + dart.str(this.index) + ", _offset: " + dart.str(this[_placeholderOffset]) + ", _targetPos: " + dart.str(targetPos));
          this[_placeholderOffset] = this[_listState].getPosByIndex(targetPos)['-'](this[_listState].getPosByIndex(selfPos));
        }, T$.VoidTovoid()));
      }
    }
    resetGap() {
      this.setState(dart.fn(() => {
        if (this[_offsetAnimation] != null) {
          dart.nullCheck(this[_offsetAnimation]).dispose();
          this[_offsetAnimation] = null;
        }
        this[_startOffset] = ui.Offset.zero;
        this[_targetOffset] = ui.Offset.zero;
        this[_placeholderOffset] = ui.Offset.zero;
      }, T$.VoidTovoid()));
    }
    [_createDragRecognizer]() {
      let dragStartDelay = this[_listState].dragStartDelay;
      if (dragStartDelay.inMilliseconds === 0) {
        return new multidrag.ImmediateMultiDragGestureRecognizer.new({debugOwner: this});
      }
      return new multidrag.DelayedMultiDragGestureRecognizer.new({debugOwner: this, delay: dragStartDelay});
    }
    initState() {
      this[_listState] = reorderable_grid_mixin.ReorderableGridStateMixin.of(this.context);
      this[_listState].registerItem(this);
      super.initState();
    }
    get offset() {
      if (this[_offsetAnimation] != null) {
        return dart.nullCheck(ui.Offset.lerp(this[_startOffset], this[_targetOffset], curves.Curves.easeInOut.transform(dart.nullCheck(this[_offsetAnimation]).value)));
      }
      return this[_targetOffset];
    }
    dispose() {
      this[_listState].unRegisterItem(this.index, this);
      super.dispose();
    }
    didUpdateWidget(oldWidget) {
      reorderable_item.ReorderableItemView.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (oldWidget.index !== this.widget.index) {
        this[_listState].unRegisterItem(oldWidget.index, this);
        this[_listState].registerItem(this);
      }
    }
    [_buildPlaceHolder]() {
      if (this[_listState].placeholderBuilder == null) {
        return C[7] || CT.C7;
      }
      return new basic.Transform.new({transform: vector_math_64.Matrix4.translationValues(this[_placeholderOffset].dx, this[_placeholderOffset].dy, 0), child: dart.nullCheck(this[_listState].placeholderBuilder)(this.index, this[_listState].dropIndex, this.child)});
    }
    build(context) {
      return new basic.RepaintBoundary.new({child: new basic.Listener.new({onPointerDown: dart.fn(e => {
            let listState = reorderable_grid_mixin.ReorderableGridStateMixin.of(context);
            if (this[_listState].dragEnabled) {
              listState.startDragRecognizer(this.index, e, this[_createDragRecognizer]());
            }
          }, T$.PointerDownEventTovoid()), child: new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraint) => new basic.Transform.new({transform: vector_math_64.Matrix4.translationValues(this.offset.dx, this.offset.dy, 0), child: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new basic.Offstage.new({offstage: !this[_dragging], child: new container.Container.new({constraints: constraint, child: this[_buildPlaceHolder]()})}), new basic.Offstage.new({offstage: this[_dragging], child: new container.Container.new({constraints: constraint, child: this.child})})])})}), T$.BuildContextAndBoxConstraintsToTransform())})})});
    }
    rebuild() {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new reorderable_item.ReorderableItemViewState.new();
    }
  };
  (reorderable_item.ReorderableItemViewState.new = function() {
    this[__ReorderableItemViewState__listState] = null;
    this[_dragging] = false;
    this[_startOffset] = ui.Offset.zero;
    this[_targetOffset] = ui.Offset.zero;
    this[_offsetAnimation] = null;
    this[_placeholderOffset] = ui.Offset.zero;
    this[childKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    reorderable_item.ReorderableItemViewState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_item.ReorderableItemViewState.prototype;
  dart.addTypeTests(reorderable_item.ReorderableItemViewState);
  dart.addTypeCaches(reorderable_item.ReorderableItemViewState);
  dart.setMethodSignature(reorderable_item.ReorderableItemViewState, () => ({
    __proto__: dart.getMethods(reorderable_item.ReorderableItemViewState.__proto__),
    getRelativePos: dart.fnType(ui.Offset, [ui.Offset]),
    updateForGap: dart.fnType(dart.void, [core.int]),
    [_checkPlaceHolder]: dart.fnType(dart.void, []),
    resetGap: dart.fnType(dart.void, []),
    [_createDragRecognizer]: dart.fnType(multidrag.MultiDragGestureRecognizer, []),
    [_buildPlaceHolder]: dart.fnType(framework.Widget, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    rebuild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(reorderable_item.ReorderableItemViewState, () => ({
    __proto__: dart.getGetters(reorderable_item.ReorderableItemViewState.__proto__),
    [_listState]: reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_grid_mixin.ReorderableGridWidgetMixin),
    key: key.Key,
    child: framework.Widget,
    index: core.int,
    indexInAll: dart.nullable(core.int),
    parentRenderBox: box$.RenderBox,
    offset: ui.Offset
  }));
  dart.setSetterSignature(reorderable_item.ReorderableItemViewState, () => ({
    __proto__: dart.getSetters(reorderable_item.ReorderableItemViewState.__proto__),
    [_listState]: reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_grid_mixin.ReorderableGridWidgetMixin),
    dragging: core.bool
  }));
  dart.setLibraryUri(reorderable_item.ReorderableItemViewState, I[7]);
  dart.setFieldSignature(reorderable_item.ReorderableItemViewState, () => ({
    __proto__: dart.getFields(reorderable_item.ReorderableItemViewState.__proto__),
    [__ReorderableItemViewState__listState]: dart.fieldType(dart.nullable(reorderable_grid_mixin.ReorderableGridStateMixin$(reorderable_grid_mixin.ReorderableGridWidgetMixin))),
    [_dragging]: dart.fieldType(core.bool),
    [_startOffset]: dart.fieldType(ui.Offset),
    [_targetOffset]: dart.fieldType(ui.Offset),
    [_offsetAnimation]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [_placeholderOffset]: dart.fieldType(ui.Offset),
    childKey: dart.finalFieldType(key.Key)
  }));
  var children$ = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.children");
  var header$ = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.header");
  var footer$ = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.footer");
  var crossAxisCount$0 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.crossAxisCount");
  var mainAxisSpacing$0 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.mainAxisSpacing");
  var crossAxisSpacing$0 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.crossAxisSpacing");
  var childAspectRatio$0 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.childAspectRatio");
  var onReorder$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.onReorder");
  var dragWidgetBuilderV2$0 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.dragWidgetBuilderV2");
  var scrollSpeedController$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.scrollSpeedController");
  var placeholderBuilder$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.placeholderBuilder");
  var onDragStart$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.onDragStart");
  var onDragUpdate$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.onDragUpdate");
  var dragStartDelay$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.dragStartDelay");
  var dragEnabled$1 = dart.privateName(reorderable_sliver_grid_view, "ReorderableSliverGridView.dragEnabled");
  reorderable_sliver_grid_view.ReorderableSliverGridView = class ReorderableSliverGridView extends framework.StatelessWidget {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get footer() {
      return this[footer$];
    }
    set footer(value) {
      super.footer = value;
    }
    get crossAxisCount() {
      return this[crossAxisCount$0];
    }
    set crossAxisCount(value) {
      super.crossAxisCount = value;
    }
    get mainAxisSpacing() {
      return this[mainAxisSpacing$0];
    }
    set mainAxisSpacing(value) {
      super.mainAxisSpacing = value;
    }
    get crossAxisSpacing() {
      return this[crossAxisSpacing$0];
    }
    set crossAxisSpacing(value) {
      super.crossAxisSpacing = value;
    }
    get childAspectRatio() {
      return this[childAspectRatio$0];
    }
    set childAspectRatio(value) {
      super.childAspectRatio = value;
    }
    get onReorder() {
      return this[onReorder$1];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get dragWidgetBuilderV2() {
      return this[dragWidgetBuilderV2$0];
    }
    set dragWidgetBuilderV2(value) {
      super.dragWidgetBuilderV2 = value;
    }
    get scrollSpeedController() {
      return this[scrollSpeedController$1];
    }
    set scrollSpeedController(value) {
      super.scrollSpeedController = value;
    }
    get placeholderBuilder() {
      return this[placeholderBuilder$1];
    }
    set placeholderBuilder(value) {
      super.placeholderBuilder = value;
    }
    get onDragStart() {
      return this[onDragStart$1];
    }
    set onDragStart(value) {
      super.onDragStart = value;
    }
    get onDragUpdate() {
      return this[onDragUpdate$1];
    }
    set onDragUpdate(value) {
      super.onDragUpdate = value;
    }
    get dragStartDelay() {
      return this[dragStartDelay$1];
    }
    set dragStartDelay(value) {
      super.dragStartDelay = value;
    }
    get dragEnabled() {
      return this[dragEnabled$1];
    }
    set dragEnabled(value) {
      super.dragEnabled = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : null;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : null;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let header = opts && 'header' in opts ? opts.header : null;
      let footer = opts && 'footer' in opts ? opts.footer : null;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : C[8] || CT.C8;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : true;
      return new reorderable_sliver_grid_view.ReorderableSliverGridView.new({key: key, children: children, crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, onReorder: onReorder, dragWidgetBuilderV2: dragWidgetBuilderV2, header: header, footer: footer, dragStartDelay: dragStartDelay, scrollSpeedController: scrollSpeedController, placeholderBuilder: placeholderBuilder, onDragStart: onDragStart, onDragUpdate: onDragUpdate, dragEnabled: dragEnabled});
    }
    static ['_#count#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
      let footer = opts && 'footer' in opts ? opts.footer : null;
      let header = opts && 'header' in opts ? opts.header : null;
      let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
      let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : C[8] || CT.C8;
      let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
      let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : true;
      return new reorderable_sliver_grid_view.ReorderableSliverGridView.count({key: key, crossAxisCount: crossAxisCount, onReorder: onReorder, dragWidgetBuilderV2: dragWidgetBuilderV2, footer: footer, header: header, onDragStart: onDragStart, onDragUpdate: onDragUpdate, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, dragStartDelay: dragStartDelay, children: children, dragEnabled: dragEnabled});
    }
    build(context) {
      util.debug("header: " + dart.str(this.header));
      let child = new sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.count({key: this.key, crossAxisCount: this.crossAxisCount, mainAxisSpacing: this.mainAxisSpacing, crossAxisSpacing: this.crossAxisSpacing, childAspectRatio: this.childAspectRatio, children: reorderable_item.ReorderableItemView.wrapMeList(this.header, this.children, this.footer)});
      return new reorderable_wrapper_widget.ReorderableWrapperWidget.new({onReorder: this.onReorder, dragWidgetBuilder: this.dragWidgetBuilderV2, dragStartDelay: this.dragStartDelay, dragEnabled: this.dragEnabled, scrollSpeedController: this.scrollSpeedController, placeholderBuilder: this.placeholderBuilder, onDragStart: this.onDragStart, onDragUpdate: this.onDragUpdate, isSliver: true, child: child});
    }
  };
  (reorderable_sliver_grid_view.ReorderableSliverGridView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : null;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : null;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
    let header = opts && 'header' in opts ? opts.header : null;
    let footer = opts && 'footer' in opts ? opts.footer : null;
    let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : C[8] || CT.C8;
    let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : true;
    this[children$] = children;
    this[crossAxisCount$0] = crossAxisCount;
    this[mainAxisSpacing$0] = mainAxisSpacing;
    this[crossAxisSpacing$0] = crossAxisSpacing;
    this[childAspectRatio$0] = childAspectRatio;
    this[onReorder$1] = onReorder;
    this[dragWidgetBuilderV2$0] = dragWidgetBuilderV2;
    this[header$] = header;
    this[footer$] = footer;
    this[dragStartDelay$1] = dragStartDelay;
    this[scrollSpeedController$1] = scrollSpeedController;
    this[placeholderBuilder$1] = placeholderBuilder;
    this[onDragStart$1] = onDragStart;
    this[onDragUpdate$1] = onDragUpdate;
    this[dragEnabled$1] = dragEnabled;
    reorderable_sliver_grid_view.ReorderableSliverGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_sliver_grid_view.ReorderableSliverGridView.prototype;
  (reorderable_sliver_grid_view.ReorderableSliverGridView.count = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let dragWidgetBuilderV2 = opts && 'dragWidgetBuilderV2' in opts ? opts.dragWidgetBuilderV2 : null;
    let footer = opts && 'footer' in opts ? opts.footer : null;
    let header = opts && 'header' in opts ? opts.header : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
    let dragStartDelay = opts && 'dragStartDelay' in opts ? opts.dragStartDelay : C[8] || CT.C8;
    let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
    let dragEnabled = opts && 'dragEnabled' in opts ? opts.dragEnabled : true;
    reorderable_sliver_grid_view.ReorderableSliverGridView.new.call(this, {key: key, onReorder: onReorder, children: T$.ListOfWidget().as(children), footer: footer, header: header, crossAxisCount: crossAxisCount, dragWidgetBuilderV2: dragWidgetBuilderV2, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, onDragStart: onDragStart, onDragUpdate: onDragUpdate, dragStartDelay: dragStartDelay, dragEnabled: dragEnabled});
  }).prototype = reorderable_sliver_grid_view.ReorderableSliverGridView.prototype;
  dart.addTypeTests(reorderable_sliver_grid_view.ReorderableSliverGridView);
  dart.addTypeCaches(reorderable_sliver_grid_view.ReorderableSliverGridView);
  dart.setMethodSignature(reorderable_sliver_grid_view.ReorderableSliverGridView, () => ({
    __proto__: dart.getMethods(reorderable_sliver_grid_view.ReorderableSliverGridView.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_sliver_grid_view.ReorderableSliverGridView, I[8]);
  dart.setFieldSignature(reorderable_sliver_grid_view.ReorderableSliverGridView, () => ({
    __proto__: dart.getFields(reorderable_sliver_grid_view.ReorderableSliverGridView.__proto__),
    children: dart.finalFieldType(core.List$(framework.Widget)),
    header: dart.finalFieldType(dart.nullable(core.List$(framework.Widget))),
    footer: dart.finalFieldType(dart.nullable(core.List$(framework.Widget))),
    crossAxisCount: dart.finalFieldType(core.int),
    mainAxisSpacing: dart.finalFieldType(core.double),
    crossAxisSpacing: dart.finalFieldType(core.double),
    childAspectRatio: dart.finalFieldType(core.double),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    dragWidgetBuilderV2: dart.finalFieldType(dart.nullable(reorderable_grid_view.DragWidgetBuilderV2)),
    scrollSpeedController: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [core.int, core.double, core.double]))),
    placeholderBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [core.int, core.int, framework.Widget]))),
    onDragStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    onDragUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int, ui.Offset, ui.Offset]))),
    dragStartDelay: dart.finalFieldType(core.Duration),
    dragEnabled: dart.finalFieldType(core.bool)
  }));
  util.debug = function debug(msg) {
    ;
  };
  util.takeScreenShot = function takeScreenShot(state) {
    return async.async(T$.ImageN(), function* takeScreenShot() {
      let renderObject = state.context.findRenderObject();
      if (proxy_box.RenderRepaintBoundary.is(renderObject)) {
        let renderRepaintBoundary = renderObject;
        let devicePixelRatio = media_query.MediaQuery.of(state.context).devicePixelRatio;
        return renderRepaintBoundary.toImage({pixelRatio: devicePixelRatio});
      }
    });
  };
  dart.defineLazy(util, {
    /*util.isDebug*/get isDebug() {
      return false;
    }
  }, false);
  sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate = class SliverGridWithReorderablePosDelegate extends sliver.SliverGrid {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      return new sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.new({key: key, delegate: delegate, gridDelegate: gridDelegate});
    }
    static ['_#count#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
      return new sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.count({key: key, crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, children: children});
    }
  };
  (sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.__proto__.new.call(this, {key: key, delegate: delegate, gridDelegate: gridDelegate});
    ;
  }).prototype = sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.prototype;
  (sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.count = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
    let children = opts && 'children' in opts ? opts.children : C[5] || CT.C5;
    sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.new.call(this, {key: key, gridDelegate: new sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.new({crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio}), delegate: new sliver.SliverChildListDelegate.new(children)});
  }).prototype = sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate.prototype;
  dart.addTypeTests(sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate);
  dart.addTypeCaches(sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate);
  dart.setLibraryUri(sliver_grid_with_reorderable_pos_delegate.SliverGridWithReorderablePosDelegate, I[9]);
  var onUpdate$ = dart.privateName(drag_info, "DragInfo.onUpdate");
  var onCancel$ = dart.privateName(drag_info, "DragInfo.onCancel");
  var onEnd$ = dart.privateName(drag_info, "DragInfo.onEnd");
  var scrollSpeedController$2 = dart.privateName(drag_info, "DragInfo.scrollSpeedController");
  var readyCallback$ = dart.privateName(drag_info, "DragInfo.readyCallback");
  var tickerProvider$ = dart.privateName(drag_info, "DragInfo.tickerProvider");
  var onStart$ = dart.privateName(drag_info, "DragInfo.onStart");
  var dragWidgetBuilder$0 = dart.privateName(drag_info, "DragInfo.dragWidgetBuilder");
  var dragPosition$ = dart.privateName(drag_info, "DragInfo.dragPosition");
  var context$ = dart.privateName(drag_info, "DragInfo.context");
  var overlay$0 = dart.privateName(drag_info, "DragInfo.overlay");
  var hasEnd = dart.privateName(drag_info, "DragInfo.hasEnd");
  var zeroOffset = dart.privateName(drag_info, "DragInfo.zeroOffset");
  var dragWidgetScreenShot = dart.privateName(drag_info, "DragInfo.dragWidgetScreenShot");
  var __DragInfo_index = dart.privateName(drag_info, "_#DragInfo#index");
  var __DragInfo_itemSize = dart.privateName(drag_info, "_#DragInfo#itemSize");
  var __DragInfo_child = dart.privateName(drag_info, "_#DragInfo#child");
  var __DragInfo_scrollable = dart.privateName(drag_info, "_#DragInfo#scrollable");
  var __DragInfo_dragOffset = dart.privateName(drag_info, "_#DragInfo#dragOffset");
  var __DragInfo_dragExtent = dart.privateName(drag_info, "_#DragInfo#dragExtent");
  var __DragInfo_dragSize = dart.privateName(drag_info, "_#DragInfo#dragSize");
  var __DragInfo_item = dart.privateName(drag_info, "_#DragInfo#item");
  var _proxyAnimationController = dart.privateName(drag_info, "_proxyAnimationController");
  var _overlayEntry = dart.privateName(drag_info, "_overlayEntry");
  var _autoScrolling = dart.privateName(drag_info, "_autoScrolling");
  var _scrollBeginTime = dart.privateName(drag_info, "_scrollBeginTime");
  var _getOverlay = dart.privateName(drag_info, "_getOverlay");
  var _defaultDragWidget = dart.privateName(drag_info, "_defaultDragWidget");
  var _scrollIfNeed = dart.privateName(drag_info, "_scrollIfNeed");
  var _endOrCancel = dart.privateName(drag_info, "_endOrCancel");
  drag_info.DragInfo = class DragInfo extends drag.Drag {
    get onUpdate() {
      return this[onUpdate$];
    }
    set onUpdate(value) {
      super.onUpdate = value;
    }
    get onCancel() {
      return this[onCancel$];
    }
    set onCancel(value) {
      super.onCancel = value;
    }
    get onEnd() {
      return this[onEnd$];
    }
    set onEnd(value) {
      super.onEnd = value;
    }
    get scrollSpeedController() {
      return this[scrollSpeedController$2];
    }
    set scrollSpeedController(value) {
      super.scrollSpeedController = value;
    }
    get readyCallback() {
      return this[readyCallback$];
    }
    set readyCallback(value) {
      super.readyCallback = value;
    }
    get tickerProvider() {
      return this[tickerProvider$];
    }
    set tickerProvider(value) {
      super.tickerProvider = value;
    }
    get onStart() {
      return this[onStart$];
    }
    set onStart(value) {
      super.onStart = value;
    }
    get dragWidgetBuilder() {
      return this[dragWidgetBuilder$0];
    }
    set dragWidgetBuilder(value) {
      super.dragWidgetBuilder = value;
    }
    get dragPosition() {
      return this[dragPosition$];
    }
    set dragPosition(value) {
      this[dragPosition$] = value;
    }
    get context() {
      return this[context$];
    }
    set context(value) {
      this[context$] = value;
    }
    get overlay() {
      return this[overlay$0];
    }
    set overlay(value) {
      this[overlay$0] = value;
    }
    get hasEnd() {
      return this[hasEnd];
    }
    set hasEnd(value) {
      this[hasEnd] = value;
    }
    get zeroOffset() {
      return this[zeroOffset];
    }
    set zeroOffset(value) {
      this[zeroOffset] = value;
    }
    get dragWidgetScreenShot() {
      return this[dragWidgetScreenShot];
    }
    set dragWidgetScreenShot(value) {
      this[dragWidgetScreenShot] = value;
    }
    get index() {
      let t0;
      t0 = this[__DragInfo_index];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("index")) : t0;
    }
    set index(index$35param) {
      this[__DragInfo_index] = index$35param;
    }
    get itemSize() {
      let t0;
      t0 = this[__DragInfo_itemSize];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("itemSize")) : t0;
    }
    set itemSize(itemSize$35param) {
      this[__DragInfo_itemSize] = itemSize$35param;
    }
    get child() {
      let t0;
      t0 = this[__DragInfo_child];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("child")) : t0;
    }
    set child(child$35param) {
      this[__DragInfo_child] = child$35param;
    }
    get scrollable() {
      let t0;
      t0 = this[__DragInfo_scrollable];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("scrollable")) : t0;
    }
    set scrollable(scrollable$35param) {
      this[__DragInfo_scrollable] = scrollable$35param;
    }
    get dragOffset() {
      let t0;
      t0 = this[__DragInfo_dragOffset];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("dragOffset")) : t0;
    }
    set dragOffset(dragOffset$35param) {
      this[__DragInfo_dragOffset] = dragOffset$35param;
    }
    get dragExtent() {
      let t0;
      t0 = this[__DragInfo_dragExtent];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("dragExtent")) : t0;
    }
    set dragExtent(dragExtent$35param) {
      this[__DragInfo_dragExtent] = dragExtent$35param;
    }
    get dragSize() {
      let t0;
      t0 = this[__DragInfo_dragSize];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("dragSize")) : t0;
    }
    set dragSize(dragSize$35param) {
      this[__DragInfo_dragSize] = dragSize$35param;
    }
    get item() {
      let t0;
      t0 = this[__DragInfo_item];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("item")) : t0;
    }
    set item(item$35param) {
      this[__DragInfo_item] = item$35param;
    }
    static ['_#new#tearOff'](opts) {
      let readyCallback = opts && 'readyCallback' in opts ? opts.readyCallback : null;
      let item = opts && 'item' in opts ? opts.item : null;
      let tickerProvider = opts && 'tickerProvider' in opts ? opts.tickerProvider : null;
      let onStart = opts && 'onStart' in opts ? opts.onStart : null;
      let dragPosition = opts && 'dragPosition' in opts ? opts.dragPosition : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let overlay = opts && 'overlay' in opts ? opts.overlay : null;
      let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
      let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
      let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let onEnd = opts && 'onEnd' in opts ? opts.onEnd : null;
      return new drag_info.DragInfo.new({readyCallback: readyCallback, item: item, tickerProvider: tickerProvider, onStart: onStart, dragPosition: dragPosition, context: context, overlay: overlay, scrollSpeedController: scrollSpeedController, dragWidgetBuilder: dragWidgetBuilder, onUpdate: onUpdate, onCancel: onCancel, onEnd: onEnd});
    }
    findNavigator(context) {
      let t0;
      let navigator = null;
      if (framework.StatefulElement.is(context) && navigator$.NavigatorState.is(context.state)) {
        navigator = navigator$.NavigatorState.as(context.state);
      }
      navigator = (t0 = navigator, t0 == null ? context.findAncestorStateOfType(navigator$.NavigatorState) : t0);
      return navigator;
    }
    getCenterInGlobal() {
      return this.getPosInGlobal()['+'](this.dragSize.center(ui.Offset.zero));
    }
    getPosInGlobal() {
      return this.dragPosition['-'](this.dragOffset);
    }
    dispose() {
      let t0, t0$;
      t0 = this[_overlayEntry];
      t0 == null ? null : t0.remove();
      this[_overlayEntry] = null;
      t0$ = this[_proxyAnimationController];
      t0$ == null ? null : t0$.dispose();
      this[_proxyAnimationController] = null;
    }
    createProxy(context) {
      let t3, t2, t1, t0;
      let position = this.dragPosition['-'](this.dragOffset);
      if (this.zeroOffset != null) {
        position = position['+'](dart.nullCheck(this.zeroOffset));
      }
      return new basic.Positioned.new({top: position.dy, left: position.dx, child: new basic.SizedBox.new({width: this.itemSize.width, height: this.itemSize.height, child: this.dragWidgetBuilder != null ? (t0 = dart.nullCheck(this.dragWidgetBuilder), t1 = this.index, t2 = this.child, t3 = this.dragWidgetScreenShot, t0.builder(t1, t2, t3)) : new material.Material.new({elevation: 3, child: this[_defaultDragWidget](context)})})});
    }
    [_defaultDragWidget](context) {
      return this.child;
    }
    [_getOverlay]() {
      let t0;
      t0 = this.overlay;
      return t0 == null ? overlay$.Overlay.of(this.context) : t0;
    }
    startDrag(screenshot) {
      this.readyCallback();
      this.dragWidgetScreenShot = screenshot;
      this[_overlayEntry] = new overlay$.OverlayEntry.new({builder: dart.bind(this, 'createProxy')});
      let overlay = this[_getOverlay]();
      overlay.insert(dart.nullCheck(this[_overlayEntry]));
      this[_scrollIfNeed]();
    }
    update(details) {
      let t0, t0$;
      this.dragPosition = this.dragPosition['+'](details.delta);
      t0 = this.onUpdate;
      t0 == null ? null : t0(this, this.dragPosition, details.delta);
      t0$ = this[_overlayEntry];
      t0$ == null ? null : t0$.markNeedsBuild();
      this[_scrollIfNeed]();
    }
    [_scrollIfNeed]() {
      return async.async(dart.void, (function* _scrollIfNeed$() {
        if (this.hasEnd) {
          this[_scrollBeginTime] = 0;
          return;
        }
        if (this.hasEnd) return;
        if (!this[_autoScrolling]) {
          let newOffset = null;
          let needScroll = false;
          let position = this.scrollable.position;
          let scrollRenderBox = box$.RenderBox.as(dart.nullCheck(this.scrollable.context.findRenderObject()));
          let scrollOrigin = scrollRenderBox.localToGlobal(ui.Offset.zero);
          let scrollStart = scrollOrigin.dy;
          let scrollEnd = scrollStart + scrollRenderBox.size.height;
          let dragInfoStart = this.getPosInGlobal().dy;
          let dragInfoEnd = dragInfoStart + this.dragExtent;
          let overBottom = dragInfoEnd > scrollEnd;
          let overTop = dragInfoStart < scrollStart;
          let needScrollBottom = overBottom && position.pixels < position.maxScrollExtent;
          let needScrollTop = overTop && position.pixels > position.minScrollExtent;
          let scroll = 5;
          let overSize = 0;
          if (needScrollBottom) {
            overSize = dragInfoEnd - scrollEnd;
            scroll = math.min(core.double, overSize, 5);
          } else if (needScrollTop) {
            overSize = scrollStart - dragInfoStart;
            scroll = math.min(core.double, overSize, 5);
          }
          function calcOffset() {
            if (needScrollBottom) {
              newOffset = math.min(core.double, position.maxScrollExtent, position.pixels + scroll);
            } else if (needScrollTop) {
              newOffset = math.max(core.double, position.minScrollExtent, position.pixels - scroll);
            }
            needScroll = newOffset != null && (dart.nullCheck(newOffset) - position.pixels)[$abs]() >= 1;
          }
          dart.fn(calcOffset, T$.VoidToNull());
          calcOffset();
          if (needScroll && this.scrollSpeedController != null) {
            if (this[_scrollBeginTime] <= 0) {
              this[_scrollBeginTime] = new core.DateTime.now().millisecondsSinceEpoch;
            }
            scroll = dart.nullCheck(this.scrollSpeedController)(new core.DateTime.now().millisecondsSinceEpoch - this[_scrollBeginTime], overSize, this.itemSize.height);
            calcOffset();
          }
          if (needScroll) {
            this[_autoScrolling] = true;
            yield position.animateTo(dart.nullCheck(newOffset), {duration: C[9] || CT.C9, curve: curves.Curves.linear});
            this[_autoScrolling] = false;
            this[_scrollIfNeed]();
          } else {
            this[_scrollBeginTime] = 0;
          }
        }
      }).bind(this));
    }
    end(details) {
      let t0;
      t0 = this.onEnd;
      t0 == null ? null : t0(this);
      this[_endOrCancel]();
    }
    cancel() {
      let t0;
      t0 = this.onCancel;
      t0 == null ? null : t0(this);
      this[_endOrCancel]();
    }
    [_endOrCancel]() {
      this.hasEnd = true;
    }
  };
  (drag_info.DragInfo.new = function(opts) {
    let readyCallback = opts && 'readyCallback' in opts ? opts.readyCallback : null;
    let item = opts && 'item' in opts ? opts.item : null;
    let tickerProvider = opts && 'tickerProvider' in opts ? opts.tickerProvider : null;
    let onStart = opts && 'onStart' in opts ? opts.onStart : null;
    let dragPosition = opts && 'dragPosition' in opts ? opts.dragPosition : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let overlay = opts && 'overlay' in opts ? opts.overlay : null;
    let scrollSpeedController = opts && 'scrollSpeedController' in opts ? opts.scrollSpeedController : null;
    let dragWidgetBuilder = opts && 'dragWidgetBuilder' in opts ? opts.dragWidgetBuilder : null;
    let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onEnd = opts && 'onEnd' in opts ? opts.onEnd : null;
    this[__DragInfo_index] = null;
    this[__DragInfo_itemSize] = null;
    this[__DragInfo_child] = null;
    this[__DragInfo_scrollable] = null;
    this[__DragInfo_dragOffset] = null;
    this[__DragInfo_dragExtent] = null;
    this[__DragInfo_dragSize] = null;
    this[__DragInfo_item] = null;
    this[_proxyAnimationController] = null;
    this[_overlayEntry] = null;
    this[hasEnd] = false;
    this[zeroOffset] = null;
    this[dragWidgetScreenShot] = null;
    this[_autoScrolling] = false;
    this[_scrollBeginTime] = 0;
    this[readyCallback$] = readyCallback;
    this[__DragInfo_item] = item;
    this[tickerProvider$] = tickerProvider;
    this[onStart$] = onStart;
    this[dragPosition$] = dragPosition;
    this[context$] = context;
    this[overlay$0] = overlay;
    this[scrollSpeedController$2] = scrollSpeedController;
    this[dragWidgetBuilder$0] = dragWidgetBuilder;
    this[onUpdate$] = onUpdate;
    this[onCancel$] = onCancel;
    this[onEnd$] = onEnd;
    this.index = this.item.index;
    this.child = this.item.widget.child;
    this.itemSize = dart.nullCheck(this.item.context.size);
    this.zeroOffset = box$.RenderBox.as(this[_getOverlay]().context.findRenderObject()).globalToLocal(ui.Offset.zero);
    let renderBox = box$.RenderBox.as(dart.nullCheck(this.item.context.findRenderObject()));
    this.dragOffset = renderBox.globalToLocal(this.dragPosition);
    this.dragExtent = renderBox.size.height;
    this.dragSize = renderBox.size;
    this.scrollable = scrollable.Scrollable.of(this.item.context);
  }).prototype = drag_info.DragInfo.prototype;
  dart.addTypeTests(drag_info.DragInfo);
  dart.addTypeCaches(drag_info.DragInfo);
  dart.setMethodSignature(drag_info.DragInfo, () => ({
    __proto__: dart.getMethods(drag_info.DragInfo.__proto__),
    findNavigator: dart.fnType(dart.nullable(navigator$.NavigatorState), [framework.BuildContext]),
    getCenterInGlobal: dart.fnType(ui.Offset, []),
    getPosInGlobal: dart.fnType(ui.Offset, []),
    dispose: dart.fnType(dart.void, []),
    createProxy: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_defaultDragWidget]: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getOverlay]: dart.fnType(overlay$.OverlayState, []),
    startDrag: dart.fnType(dart.void, [dart.nullable(image_provider.ImageProvider$(core.Object))]),
    [_scrollIfNeed]: dart.fnType(dart.void, []),
    [_endOrCancel]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(drag_info.DragInfo, () => ({
    __proto__: dart.getGetters(drag_info.DragInfo.__proto__),
    index: core.int,
    itemSize: ui.Size,
    child: framework.Widget,
    scrollable: scrollable.ScrollableState,
    dragOffset: ui.Offset,
    dragExtent: core.double,
    dragSize: ui.Size,
    item: reorderable_item.ReorderableItemViewState
  }));
  dart.setSetterSignature(drag_info.DragInfo, () => ({
    __proto__: dart.getSetters(drag_info.DragInfo.__proto__),
    index: core.int,
    itemSize: ui.Size,
    child: framework.Widget,
    scrollable: scrollable.ScrollableState,
    dragOffset: ui.Offset,
    dragExtent: core.double,
    dragSize: ui.Size,
    item: reorderable_item.ReorderableItemViewState
  }));
  dart.setLibraryUri(drag_info.DragInfo, I[10]);
  dart.setFieldSignature(drag_info.DragInfo, () => ({
    __proto__: dart.getFields(drag_info.DragInfo.__proto__),
    [__DragInfo_index]: dart.fieldType(dart.nullable(core.int)),
    onUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_info.DragInfo, ui.Offset, ui.Offset]))),
    onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_info.DragInfo]))),
    onEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_info.DragInfo]))),
    scrollSpeedController: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [core.int, core.double, core.double]))),
    readyCallback: dart.finalFieldType(dart.fnType(dart.void, [])),
    tickerProvider: dart.finalFieldType(ticker.TickerProvider),
    onStart: dart.finalFieldType(dart.fnType(dart.nullable(drag.Drag), [ui.Offset])),
    dragWidgetBuilder: dart.finalFieldType(dart.nullable(reorderable_grid_view.DragWidgetBuilderV2)),
    [__DragInfo_itemSize]: dart.fieldType(dart.nullable(ui.Size)),
    [__DragInfo_child]: dart.fieldType(dart.nullable(framework.Widget)),
    [__DragInfo_scrollable]: dart.fieldType(dart.nullable(scrollable.ScrollableState)),
    dragPosition: dart.fieldType(ui.Offset),
    [__DragInfo_dragOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [__DragInfo_dragExtent]: dart.fieldType(dart.nullable(core.double)),
    [__DragInfo_dragSize]: dart.fieldType(dart.nullable(ui.Size)),
    [__DragInfo_item]: dart.fieldType(dart.nullable(reorderable_item.ReorderableItemViewState)),
    [_proxyAnimationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [_overlayEntry]: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
    context: dart.fieldType(framework.BuildContext),
    overlay: dart.fieldType(dart.nullable(overlay$.OverlayState)),
    hasEnd: dart.fieldType(core.bool),
    zeroOffset: dart.fieldType(dart.nullable(ui.Offset)),
    dragWidgetScreenShot: dart.fieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    [_autoScrolling]: dart.fieldType(core.bool),
    [_scrollBeginTime]: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(drag_info.DragInfo, () => ['defaultScrollDuration']);
  dart.defineLazy(drag_info.DragInfo, {
    /*drag_info.DragInfo.defaultScrollDuration*/get defaultScrollDuration() {
      return 14;
    }
  }, false);
  var renderRepaintBoundary$ = dart.privateName(drag_info, "ScreenshotWidget.renderRepaintBoundary");
  var dragWidgetCallback$ = dart.privateName(drag_info, "ScreenshotWidget.dragWidgetCallback");
  var devicePixelRatio$ = dart.privateName(drag_info, "ScreenshotWidget.devicePixelRatio");
  drag_info.ScreenshotWidget = class ScreenshotWidget extends framework.StatefulWidget {
    get renderRepaintBoundary() {
      return this[renderRepaintBoundary$];
    }
    set renderRepaintBoundary(value) {
      super.renderRepaintBoundary = value;
    }
    get dragWidgetCallback() {
      return this[dragWidgetCallback$];
    }
    set dragWidgetCallback(value) {
      super.dragWidgetCallback = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let renderRepaintBoundary = opts && 'renderRepaintBoundary' in opts ? opts.renderRepaintBoundary : null;
      let dragWidgetCallback = opts && 'dragWidgetCallback' in opts ? opts.dragWidgetCallback : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      return new drag_info.ScreenshotWidget.new({key: key, renderRepaintBoundary: renderRepaintBoundary, dragWidgetCallback: dragWidgetCallback, devicePixelRatio: devicePixelRatio});
    }
    createState() {
      return new drag_info._ScreenshotWidgetState.new();
    }
  };
  (drag_info.ScreenshotWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let renderRepaintBoundary = opts && 'renderRepaintBoundary' in opts ? opts.renderRepaintBoundary : null;
    let dragWidgetCallback = opts && 'dragWidgetCallback' in opts ? opts.dragWidgetCallback : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    this[renderRepaintBoundary$] = renderRepaintBoundary;
    this[dragWidgetCallback$] = dragWidgetCallback;
    this[devicePixelRatio$] = devicePixelRatio;
    drag_info.ScreenshotWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = drag_info.ScreenshotWidget.prototype;
  dart.addTypeTests(drag_info.ScreenshotWidget);
  dart.addTypeCaches(drag_info.ScreenshotWidget);
  dart.setMethodSignature(drag_info.ScreenshotWidget, () => ({
    __proto__: dart.getMethods(drag_info.ScreenshotWidget.__proto__),
    createState: dart.fnType(framework.State$(drag_info.ScreenshotWidget), [])
  }));
  dart.setLibraryUri(drag_info.ScreenshotWidget, I[10]);
  dart.setFieldSignature(drag_info.ScreenshotWidget, () => ({
    __proto__: dart.getFields(drag_info.ScreenshotWidget.__proto__),
    renderRepaintBoundary: dart.finalFieldType(proxy_box.RenderRepaintBoundary),
    dragWidgetCallback: dart.finalFieldType(dart.fnType(dart.void, [])),
    devicePixelRatio: dart.finalFieldType(core.double)
  }));
  var _load = dart.privateName(drag_info, "_load");
  drag_info._ScreenshotWidgetState = class _ScreenshotWidgetState extends framework.State$(drag_info.ScreenshotWidget) {
    static ['_#new#tearOff']() {
      return new drag_info._ScreenshotWidgetState.new();
    }
    initState() {
      super.initState();
      this[_load]();
    }
    [_load]() {
      return async.async(dart.dynamic, (function* _load$() {
        if (this.widget.renderRepaintBoundary.debugNeedsPaint) {
          async.Timer.new(C[10] || CT.C10, dart.fn(() => this[_load](), T$.VoidTovoid()));
          return;
        }
        util.debug("devicePixelRatio: " + dart.str(this.widget.devicePixelRatio));
        let image = (yield this.widget.renderRepaintBoundary.toImage({pixelRatio: this.widget.devicePixelRatio}));
        let byteData = (yield image.toByteData({format: ui.ImageByteFormat.png}));
        this.widget.dragWidgetCallback();
        this.setState(dart.fn(() => {
          if (byteData != null) {
            this.imageProvider = new image_provider.MemoryImage.new(typed_data.Uint8List.view(byteData[$buffer]));
          } else {
            util.debug("why byteData is null?");
          }
        }, T$.VoidTovoid()));
      }).bind(this));
    }
    build(context) {
      if (this.imageProvider == null) {
        return new container.Container.new();
      }
      return new image.Image.new({image: dart.nullCheck(this.imageProvider)});
    }
  };
  (drag_info._ScreenshotWidgetState.new = function() {
    this.imageProvider = null;
    drag_info._ScreenshotWidgetState.__proto__.new.call(this);
    ;
  }).prototype = drag_info._ScreenshotWidgetState.prototype;
  dart.addTypeTests(drag_info._ScreenshotWidgetState);
  dart.addTypeCaches(drag_info._ScreenshotWidgetState);
  dart.setMethodSignature(drag_info._ScreenshotWidgetState, () => ({
    __proto__: dart.getMethods(drag_info._ScreenshotWidgetState.__proto__),
    [_load]: dart.fnType(dart.dynamic, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(drag_info._ScreenshotWidgetState, I[10]);
  dart.setFieldSignature(drag_info._ScreenshotWidgetState, () => ({
    __proto__: dart.getFields(drag_info._ScreenshotWidgetState.__proto__),
    imageProvider: dart.fieldType(dart.nullable(image_provider.ImageProvider$(core.Object)))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:reorderable_grid_view/reorderable_grid_view.dart": reorderable_grid_view,
    "package:reorderable_grid_view/src/reorderable_wrapper_widget.dart": reorderable_wrapper_widget,
    "package:reorderable_grid_view/src/reorderable_item.dart": reorderable_item,
    "package:reorderable_grid_view/src/reorderable_sliver_grid_view.dart": reorderable_sliver_grid_view,
    "package:reorderable_grid_view/src/reorderable_grid_mixin.dart": reorderable_grid_mixin,
    "package:reorderable_grid_view/src/util.dart": util,
    "package:reorderable_grid_view/src/sliver_grid_with_reorderable_pos_delegate.dart": sliver_grid_with_reorderable_pos_delegate,
    "package:reorderable_grid_view/src/drag_info.dart": drag_info
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/reorderable_grid_view.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_grid_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_wrapper_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_item.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/reorderable_sliver_grid_view.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/util.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/sliver_grid_with_reorderable_pos_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid_view-2.2.8/lib/src/drag_info.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    reorderable_grid_view: reorderable_grid_view,
    src__reorderable_wrapper_widget: reorderable_wrapper_widget,
    src__reorderable_item: reorderable_item,
    src__reorderable_sliver_grid_view: reorderable_sliver_grid_view,
    src__reorderable_grid_mixin: reorderable_grid_mixin,
    src__util: util,
    src__sliver_grid_with_reorderable_pos_delegate: sliver_grid_with_reorderable_pos_delegate,
    src__drag_info: drag_info
  };
}));

//# sourceMappingURL=main.js.map
